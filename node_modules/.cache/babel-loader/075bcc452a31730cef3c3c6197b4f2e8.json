{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { SvgRenderer } from '../svg-render/index';\nimport { createElement, remove, merge } from '@syncfusion/ej2-base';\n/**\n * Function to measure the height and width of the text.\n * @param  {string} text\n * @param  {FontModel} font\n * @param  {string} id\n * @returns no\n * @private\n */\n\nexport function measureText(text, font) {\n  var breakText = text || ''; // For avoid NuLL value\n\n  var htmlObject = document.getElementById('chartmeasuretext');\n\n  if (htmlObject === null) {\n    htmlObject = createElement('text', {\n      id: 'chartmeasuretext'\n    });\n    document.body.appendChild(htmlObject);\n  }\n\n  if (typeof text === 'string' && (text.indexOf('<') > -1 || text.indexOf('>') > -1)) {\n    var textArray = text.split(' ');\n\n    for (var i = 0; i < textArray.length; i++) {\n      if (textArray[i].indexOf('<br/>') === -1) {\n        textArray[i] = textArray[i].replace(/[<>]/g, '&');\n      }\n    }\n\n    text = textArray.join(' ');\n  }\n\n  htmlObject.innerHTML = breakText.indexOf('<br>') > -1 ? breakText : text;\n  htmlObject.style.position = 'fixed';\n  htmlObject.style.fontSize = font.size;\n  htmlObject.style.fontWeight = font.fontWeight;\n  htmlObject.style.fontStyle = font.fontStyle;\n  htmlObject.style.fontFamily = font.fontFamily;\n  htmlObject.style.visibility = 'hidden';\n  htmlObject.style.top = '-100';\n  htmlObject.style.left = '0';\n  htmlObject.style.whiteSpace = 'nowrap'; // For bootstrap line height issue\n\n  htmlObject.style.lineHeight = 'normal';\n  return new Size(htmlObject.clientWidth, htmlObject.clientHeight);\n}\n/** @private */\n\nexport function findDirection(rX, rY, rect, arrowLocation, arrowPadding, top, bottom, left, tipX, tipY, tipRadius) {\n  var direction = '';\n  var startX = rect.x;\n  var startY = rect.y;\n  var width = rect.x + rect.width;\n  var height = rect.y + rect.height;\n  tipRadius = tipRadius ? tipRadius : 0;\n\n  if (top) {\n    direction = direction.concat('M' + ' ' + startX + ' ' + (startY + rY) + ' Q ' + startX + ' ' + startY + ' ' + (startX + rX) + ' ' + startY + ' ' + ' L' + ' ' + (width - rX) + ' ' + startY + ' Q ' + width + ' ' + startY + ' ' + width + ' ' + (startY + rY));\n    direction = direction.concat(' L' + ' ' + width + ' ' + (height - rY) + ' Q ' + width + ' ' + height + ' ' + (width - rX) + ' ' + height);\n\n    if (arrowPadding !== 0) {\n      direction = direction.concat(' L' + ' ' + (arrowLocation.x + arrowPadding / 2) + ' ' + height);\n      direction = direction.concat(' L' + ' ' + (tipX + tipRadius) + ' ' + (height + arrowPadding - tipRadius));\n      direction += ' Q' + ' ' + tipX + ' ' + (height + arrowPadding) + ' ' + (tipX - tipRadius) + ' ' + (height + arrowPadding - tipRadius);\n    }\n\n    if (arrowLocation.x - arrowPadding / 2 > startX) {\n      direction = direction.concat(' L' + ' ' + (arrowLocation.x - arrowPadding / 2) + ' ' + height + ' L' + ' ' + (startX + rX) + ' ' + height + ' Q ' + startX + ' ' + height + ' ' + startX + ' ' + (height - rY) + ' z');\n    } else {\n      if (arrowPadding === 0) {\n        direction = direction.concat(' L' + ' ' + (startX + rX) + ' ' + height + ' Q ' + startX + ' ' + height + ' ' + startX + ' ' + (height - rY) + ' z');\n      } else {\n        direction = direction.concat(' L' + ' ' + startX + ' ' + (height + rY) + ' z');\n      }\n    }\n  } else if (bottom) {\n    direction = direction.concat('M' + ' ' + startX + ' ' + (startY + rY) + ' Q ' + startX + ' ' + startY + ' ' + (startX + rX) + ' ' + startY + ' L' + ' ' + (arrowLocation.x - arrowPadding / 2) + ' ' + startY);\n    direction = direction.concat(' L' + ' ' + (tipX - tipRadius) + ' ' + (arrowLocation.y + tipRadius));\n    direction += ' Q' + ' ' + tipX + ' ' + arrowLocation.y + ' ' + (tipX + tipRadius) + ' ' + (arrowLocation.y + tipRadius);\n    direction = direction.concat(' L' + ' ' + (arrowLocation.x + arrowPadding / 2) + ' ' + startY + ' L' + ' ' + (width - rX) + ' ' + startY + ' Q ' + width + ' ' + startY + ' ' + width + ' ' + (startY + rY));\n    direction = direction.concat(' L' + ' ' + width + ' ' + (height - rY) + ' Q ' + width + ' ' + height + ' ' + (width - rX) + ' ' + height + ' L' + ' ' + (startX + rX) + ' ' + height + ' Q ' + startX + ' ' + height + ' ' + startX + ' ' + (height - rY) + ' z');\n  } else if (left) {\n    direction = direction.concat('M' + ' ' + startX + ' ' + (startY + rY) + ' Q ' + startX + ' ' + startY + ' ' + (startX + rX) + ' ' + startY);\n    direction = direction.concat(' L' + ' ' + (width - rX) + ' ' + startY + ' Q ' + width + ' ' + startY + ' ' + width + ' ' + (startY + rY) + ' L' + ' ' + width + ' ' + (arrowLocation.y - arrowPadding / 2));\n    direction = direction.concat(' L' + ' ' + (width + arrowPadding - tipRadius) + ' ' + (tipY - tipRadius));\n    direction += ' Q ' + (width + arrowPadding) + ' ' + tipY + ' ' + (width + arrowPadding - tipRadius) + ' ' + (tipY + tipRadius);\n    direction = direction.concat(' L' + ' ' + width + ' ' + (arrowLocation.y + arrowPadding / 2) + ' L' + ' ' + width + ' ' + (height - rY) + ' Q ' + width + ' ' + height + ' ' + (width - rX) + ' ' + height);\n    direction = direction.concat(' L' + ' ' + (startX + rX) + ' ' + height + ' Q ' + startX + ' ' + height + ' ' + startX + ' ' + (height - rY) + ' z');\n  } else {\n    direction = direction.concat('M' + ' ' + (startX + rX) + ' ' + startY + ' Q ' + startX + ' ' + startY + ' ' + startX + ' ' + (startY + rY) + ' L' + ' ' + startX + ' ' + (arrowLocation.y - arrowPadding / 2));\n    direction = direction.concat(' L' + ' ' + (startX - arrowPadding + tipRadius) + ' ' + (tipY - tipRadius));\n    direction += ' Q ' + (startX - arrowPadding) + ' ' + tipY + ' ' + (startX - arrowPadding + tipRadius) + ' ' + (tipY + tipRadius);\n    direction = direction.concat(' L' + ' ' + startX + ' ' + (arrowLocation.y + arrowPadding / 2) + ' L' + ' ' + startX + ' ' + (height - rY) + ' Q ' + startX + ' ' + height + ' ' + (startX + rX) + ' ' + height);\n    direction = direction.concat(' L' + ' ' + (width - rX) + ' ' + height + ' Q ' + width + ' ' + height + ' ' + width + ' ' + (height - rY) + ' L' + ' ' + width + ' ' + (startY + rY) + ' Q ' + width + ' ' + startY + ' ' + (width - rX) + ' ' + startY + ' z');\n  }\n\n  return direction;\n}\n/** @private */\n\nvar Size =\n/** @class */\nfunction () {\n  function Size(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n\n  return Size;\n}();\n\nexport { Size };\n/** @private */\n\nvar Rect =\n/** @class */\nfunction () {\n  function Rect(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  return Rect;\n}();\n\nexport { Rect };\n\nvar Side =\n/** @class */\nfunction () {\n  function Side(bottom, right) {\n    this.isRight = right;\n    this.isBottom = bottom;\n  }\n\n  return Side;\n}();\n\nexport { Side };\n/** @private */\n\nvar CustomizeOption =\n/** @class */\nfunction () {\n  function CustomizeOption(id) {\n    this.id = id;\n  }\n\n  return CustomizeOption;\n}();\n\nexport { CustomizeOption };\n/** @private */\n\nvar TextOption =\n/** @class */\nfunction (_super) {\n  __extends(TextOption, _super);\n\n  function TextOption(id, x, y, anchor, text, transform, baseLine, labelRotation) {\n    if (transform === void 0) {\n      transform = '';\n    }\n\n    var _this = _super.call(this, id) || this;\n\n    _this.transform = '';\n    _this.baseLine = 'auto';\n    _this.labelRotation = 0;\n    _this.x = x;\n    _this.y = y;\n    _this.anchor = anchor;\n    _this.text = text;\n    _this.transform = transform;\n    _this.baseLine = baseLine;\n    _this.labelRotation = labelRotation;\n    return _this;\n  }\n\n  return TextOption;\n}(CustomizeOption);\n\nexport { TextOption };\n/** @private */\n\nexport function getElement(id) {\n  return document.getElementById(id);\n}\n/** @private */\n\nexport function removeElement(id) {\n  var element = getElement(id);\n\n  if (element) {\n    remove(element);\n  }\n}\n/** @private */\n\nexport function drawSymbol(location, shape, size, url, options, label) {\n  var functionName = 'Path';\n  var renderer = new SvgRenderer('');\n  var temp = calculateShapes(location, size, shape, options, url);\n  var htmlObject = renderer['draw' + temp.functionName](temp.renderOption);\n  htmlObject.setAttribute('aria-label', label);\n  return htmlObject;\n}\n/** @private */\n\nexport function calculateShapes(location, size, shape, options, url) {\n  var path;\n  var functionName = 'Path';\n  var width = size.width;\n  var height = size.height;\n  var locX = location.x;\n  var locY = location.y;\n  var x = location.x + -width / 2;\n  var y = location.y + -height / 2;\n\n  switch (shape) {\n    case 'Circle':\n    case 'Bubble':\n      functionName = 'Ellipse';\n      merge(options, {\n        'rx': width / 2,\n        'ry': height / 2,\n        'cx': locX,\n        'cy': locY\n      });\n      break;\n\n    case 'Cross':\n      path = 'M' + ' ' + x + ' ' + locY + ' ' + 'L' + ' ' + (locX + width / 2) + ' ' + locY + ' ' + 'M' + ' ' + locX + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + locX + ' ' + (locY + -height / 2);\n      merge(options, {\n        'd': path\n      });\n      break;\n\n    case 'HorizontalLine':\n      path = 'M' + ' ' + x + ' ' + locY + ' ' + 'L' + ' ' + (locX + width / 2) + ' ' + locY;\n      merge(options, {\n        'd': path\n      });\n      break;\n\n    case 'VerticalLine':\n      path = 'M' + ' ' + locX + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + locX + ' ' + (locY + -height / 2);\n      merge(options, {\n        'd': path\n      });\n      break;\n\n    case 'Diamond':\n      path = 'M' + ' ' + x + ' ' + locY + ' ' + 'L' + ' ' + locX + ' ' + (locY + -height / 2) + ' ' + 'L' + ' ' + (locX + width / 2) + ' ' + locY + ' ' + 'L' + ' ' + locX + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + x + ' ' + locY + ' z';\n      merge(options, {\n        'd': path\n      });\n      break;\n\n    case 'Rectangle':\n      path = 'M' + ' ' + x + ' ' + (locY + -height / 2) + ' ' + 'L' + ' ' + (locX + width / 2) + ' ' + (locY + -height / 2) + ' ' + 'L' + ' ' + (locX + width / 2) + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + x + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + x + ' ' + (locY + -height / 2) + ' z';\n      merge(options, {\n        'd': path\n      });\n      break;\n\n    case 'Triangle':\n      path = 'M' + ' ' + x + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + locX + ' ' + (locY + -height / 2) + ' ' + 'L' + ' ' + (locX + width / 2) + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + x + ' ' + (locY + height / 2) + ' z';\n      merge(options, {\n        'd': path\n      });\n      break;\n\n    case 'InvertedTriangle':\n      path = 'M' + ' ' + (locX + width / 2) + ' ' + (locY - height / 2) + ' ' + 'L' + ' ' + locX + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + (locX - width / 2) + ' ' + (locY - height / 2) + ' ' + 'L' + ' ' + (locX + width / 2) + ' ' + (locY - height / 2) + ' z';\n      merge(options, {\n        'd': path\n      });\n      break;\n\n    case 'Pentagon':\n      var eq = 72;\n      var xValue = void 0;\n      var yValue = void 0;\n\n      for (var i = 0; i <= 5; i++) {\n        xValue = width / 2 * Math.cos(Math.PI / 180 * (i * eq));\n        yValue = height / 2 * Math.sin(Math.PI / 180 * (i * eq));\n\n        if (i === 0) {\n          path = 'M' + ' ' + (locX + xValue) + ' ' + (locY + yValue) + ' ';\n        } else {\n          path = path.concat('L' + ' ' + (locX + xValue) + ' ' + (locY + yValue) + ' ');\n        }\n      }\n\n      path = path.concat('Z');\n      merge(options, {\n        'd': path\n      });\n      break;\n\n    case 'Image':\n      functionName = 'Image';\n      merge(options, {\n        'href': url,\n        'height': height,\n        'width': width,\n        x: x,\n        y: y\n      });\n      break;\n  }\n\n  return {\n    renderOption: options,\n    functionName: functionName\n  };\n}\n/** @private */\n\nvar PathOption =\n/** @class */\nfunction (_super) {\n  __extends(PathOption, _super);\n\n  function PathOption(id, fill, width, color, opacity, dashArray, d) {\n    var _this = _super.call(this, id) || this;\n\n    _this.opacity = opacity;\n    _this.fill = fill;\n    _this.stroke = color;\n    _this['stroke-width'] = width;\n    _this['stroke-dasharray'] = dashArray;\n    _this.d = d;\n    return _this;\n  }\n\n  return PathOption;\n}(CustomizeOption);\n\nexport { PathOption };\n/** @private */\n\nexport function textElement(options, font, color, parent) {\n  var renderOptions = {};\n  var htmlObject;\n  var tspanElement;\n  var renderer = new SvgRenderer('');\n  var text;\n  var height;\n  renderOptions = {\n    'id': options.id,\n    'x': options.x,\n    'y': options.y,\n    'fill': color,\n    'font-size': font.size,\n    'font-style': font.fontStyle,\n    'font-family': font.fontFamily,\n    'font-weight': font.fontWeight,\n    'text-anchor': options.anchor,\n    'transform': options.transform,\n    'opacity': font.opacity,\n    'dominant-baseline': options.baseLine\n  };\n  text = typeof options.text === 'string' ? options.text : options.text[0];\n  htmlObject = renderer.createText(renderOptions, text);\n  parent.appendChild(htmlObject);\n  return htmlObject;\n}\n\nvar TooltipLocation =\n/** @class */\nfunction () {\n  function TooltipLocation(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  return TooltipLocation;\n}();\n\nexport { TooltipLocation };","map":null,"metadata":{},"sourceType":"module"}