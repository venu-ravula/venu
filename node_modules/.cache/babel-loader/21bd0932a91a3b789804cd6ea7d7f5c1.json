{"ast":null,"code":"import { ColorValue } from '../index';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * ColorMapping class\n */\n\nvar ColorMapping =\n/** @class */\nfunction () {\n  function ColorMapping(maps) {\n    this.maps = maps;\n  }\n  /**\n   * To get color based on shape settings.\n   * @private\n   */\n\n\n  ColorMapping.prototype.getShapeColorMapping = function (shapeSettings, layerData, color) {\n    var colorValuePath = shapeSettings.colorValuePath ? shapeSettings.colorValuePath : shapeSettings.valuePath;\n    var equalValue = layerData[colorValuePath];\n    var colorValue = Number(equalValue);\n    var shapeColor = this.getColorByValue(shapeSettings.colorMapping, colorValue, equalValue);\n    return shapeColor ? shapeColor : color;\n  };\n  /**\n   * To color by value and color mapping\n   */\n\n\n  ColorMapping.prototype.getColorByValue = function (colorMapping, colorValue, equalValue) {\n    if (isNaN(colorValue) && isNullOrUndefined(equalValue)) {\n      return null;\n    }\n\n    var fill = '';\n    var opacity;\n    var gradientColor;\n    var gradientFill;\n\n    for (var _i = 0, colorMapping_1 = colorMapping; _i < colorMapping_1.length; _i++) {\n      var colorMap = colorMapping_1[_i];\n\n      if (!isNullOrUndefined(colorMap.from) && !isNullOrUndefined(colorMap.to) && colorValue >= colorMap.from && colorValue <= colorMap.to || colorMap.value === equalValue) {\n        if (Object.prototype.toString.call(colorMap.color) === '[object Array]') {\n          if (!isNullOrUndefined(colorMap.value)) {\n            fill = colorMap.color[0];\n          } else {\n            gradientFill = this.getColor(colorMap, colorValue);\n            fill = gradientFill;\n          }\n        } else {\n          fill = colorMap.color;\n        }\n      }\n\n      if ((colorValue >= colorMap.from && colorValue <= colorMap.to || colorMap.value === equalValue) && !isNullOrUndefined(colorMap.minOpacity) && !isNullOrUndefined(colorMap.maxOpacity) && fill) {\n        opacity = this.deSaturationColor(colorMap, fill, colorValue, equalValue);\n      }\n\n      if ((fill === '' || isNullOrUndefined(fill)) && isNullOrUndefined(colorMap.from) && isNullOrUndefined(colorMap.to) && isNullOrUndefined(colorMap.minOpacity) && isNullOrUndefined(colorMap.maxOpacity) && isNullOrUndefined(colorMap.value)) {\n        fill = Object.prototype.toString.call(colorMap.color) === '[object Array]' ? colorMap.color[0] : colorMap.color;\n      }\n    }\n\n    return {\n      fill: fill || (!colorMapping.length ? equalValue : null),\n      opacity: opacity\n    };\n  };\n\n  ColorMapping.prototype.deSaturationColor = function (colorMapping, color, rangeValue, equalValue) {\n    var opacity = 1;\n\n    if (rangeValue >= colorMapping.from && rangeValue <= colorMapping.to || colorMapping.value === equalValue) {\n      var ratio = !isNaN(rangeValue) ? (rangeValue - colorMapping.from) / (colorMapping.to - colorMapping.from) : colorMapping.from / (colorMapping.to - colorMapping.from);\n      opacity = ratio * (colorMapping.maxOpacity - colorMapping.minOpacity) + colorMapping.minOpacity;\n    }\n\n    return opacity;\n  };\n\n  ColorMapping.prototype.rgbToHex = function (r, g, b) {\n    return '#' + this.componentToHex(r) + this.componentToHex(g) + this.componentToHex(b);\n  };\n\n  ColorMapping.prototype.componentToHex = function (value) {\n    var hex = value.toString(16);\n    return hex.length === 1 ? '0' + hex : hex;\n  };\n\n  ColorMapping.prototype.getColor = function (colorMap, value) {\n    var color = '';\n    var rbg;\n\n    if (Number(value) === colorMap.from) {\n      color = colorMap.color[0];\n    } else if (Number(value) === colorMap.to) {\n      color = colorMap.color[colorMap.color.length - 1];\n    } else {\n      rbg = this.getGradientColor(Number(value), colorMap);\n      color = this.rgbToHex(rbg.r, rbg.g, rbg.b);\n    }\n\n    return color;\n  };\n  /* tslint:disable-next-line:max-func-body-length */\n\n  /* tslint:disable:no-string-literal */\n\n\n  ColorMapping.prototype.getGradientColor = function (value, colorMap) {\n    var previousOffset = colorMap.from;\n    var nextOffset = colorMap.to;\n    var percent = 0;\n    var prev1;\n    var full = nextOffset - previousOffset;\n    var midColor;\n    var midreturn;\n    percent = (value - previousOffset) / full;\n    var previousColor;\n    var nextColor;\n\n    if (colorMap.color.length <= 2) {\n      previousColor = colorMap.color[0].charAt(0) === '#' ? colorMap.color[0] : this._colorNameToHex(colorMap.color[0]);\n      nextColor = colorMap.color[colorMap.color.length - 1].charAt(0) === '#' ? colorMap.color[colorMap.color.length - 1] : this._colorNameToHex(colorMap.color[colorMap.color.length - 1]);\n    } else {\n      previousColor = colorMap.color[0].charAt(0) === '#' ? colorMap.color[0] : this._colorNameToHex(colorMap.color[0]);\n      nextColor = colorMap.color[colorMap.color.length - 1].charAt(0) === '#' ? colorMap.color[colorMap.color.length - 1] : this._colorNameToHex(colorMap.color[colorMap.color.length - 1]);\n      var a = full / (colorMap.color.length - 1);\n      var b = void 0;\n      var c = void 0;\n      var length_1 = colorMap.color.length - 1;\n      var splitColorValueOffset = [];\n      var splitColor = {};\n\n      for (var j = 1; j < length_1; j++) {\n        c = j * a;\n        b = previousOffset + c;\n        splitColor = {\n          b: b,\n          color: colorMap.color[j]\n        };\n        splitColorValueOffset.push(splitColor);\n      }\n\n      for (var i = 0; i < splitColorValueOffset.length; i++) {\n        if (previousOffset <= value && value <= splitColorValueOffset[i]['b'] && i === 0) {\n          midColor = splitColorValueOffset[i]['color'].charAt(0) === '#' ? splitColorValueOffset[i]['color'] : this._colorNameToHex(splitColorValueOffset[i]['color']);\n          nextColor = midColor;\n          percent = value < splitColorValueOffset[i]['b'] ? 1 - Math.abs((value - splitColorValueOffset[i]['b']) / a) : (value - splitColorValueOffset[i]['b']) / a;\n        } else if (splitColorValueOffset[i]['b'] <= value && value <= nextOffset && i === splitColorValueOffset.length - 1) {\n          midColor = splitColorValueOffset[i]['color'].charAt(0) === '#' ? splitColorValueOffset[i]['color'] : this._colorNameToHex(splitColorValueOffset[i]['color']);\n          previousColor = midColor;\n          percent = value < splitColorValueOffset[i]['b'] ? 1 - Math.abs((value - splitColorValueOffset[i]['b']) / a) : (value - splitColorValueOffset[i]['b']) / a;\n        }\n\n        if (i !== splitColorValueOffset.length - 1 && i < splitColorValueOffset.length) {\n          if (splitColorValueOffset[i]['b'] <= value && value <= splitColorValueOffset[i + 1]['b']) {\n            midColor = splitColorValueOffset[i]['color'].charAt(0) === '#' ? splitColorValueOffset[i]['color'] : this._colorNameToHex(splitColorValueOffset[i]['color']);\n            previousColor = midColor;\n            nextColor = splitColorValueOffset[i + 1]['color'].charAt(0) === '#' ? splitColorValueOffset[i + 1]['color'] : this._colorNameToHex(splitColorValueOffset[i + 1]['color']);\n            percent = Math.abs(value - splitColorValueOffset[i + 1]['b']) / a;\n          }\n        }\n      }\n    }\n\n    return this.getPercentageColor(percent, previousColor, nextColor);\n  };\n\n  ColorMapping.prototype.getPercentageColor = function (percent, previous, next) {\n    var nextColor = next.split('#')[1];\n    var prevColor = previous.split('#')[1];\n    var r = this.getPercentage(percent, parseInt(prevColor.substr(0, 2), 16), parseInt(nextColor.substr(0, 2), 16));\n    var g = this.getPercentage(percent, parseInt(prevColor.substr(2, 2), 16), parseInt(nextColor.substr(2, 2), 16));\n    var b = this.getPercentage(percent, parseInt(prevColor.substr(4, 2), 16), parseInt(nextColor.substr(4, 2), 16));\n    return new ColorValue(r, g, b);\n  };\n\n  ColorMapping.prototype.getPercentage = function (percent, previous, next) {\n    var full = next - previous;\n    return Math.round(previous + full * percent);\n  };\n\n  ColorMapping.prototype._colorNameToHex = function (color) {\n    var colors = {\n      'aliceblue': '#f0f8ff',\n      'antiquewhite': '#faebd7',\n      'aqua': '#00ffff',\n      'aquamarine': '#7fffd4',\n      'azure': '#f0ffff',\n      'beige': '#f5f5dc',\n      'bisque': '#ffe4c4',\n      'black': '#000000',\n      'blanchedalmond': '#ffebcd',\n      'blue': '#0000ff',\n      'blueviolet': '#8a2be2',\n      'brown': '#a52a2a',\n      'burlywood': '#deb887',\n      'cadetblue': '#5f9ea0',\n      'chartreuse': '#7fff00',\n      'chocolate': '#d2691e',\n      'coral': '#ff7f50',\n      'cornflowerblue': '#6495ed',\n      'cornsilk': '#fff8dc',\n      'crimson': '#dc143c',\n      'cyan': '#00ffff',\n      'darkblue': '#00008b',\n      'darkcyan': '#008b8b',\n      'darkgoldenrod': '#b8860b',\n      'darkgray': '#a9a9a9',\n      'darkgreen': '#006400',\n      'darkkhaki': '#bdb76b',\n      'darkmagenta': '#8b008b',\n      'darkolivegreen': '#556b2f',\n      'darkorange': '#ff8c00',\n      'darkorchid': '#9932cc',\n      'darkred': '#8b0000',\n      'darksalmon': '#e9967a',\n      'darkseagreen': '#8fbc8f',\n      'darkslateblue': '#483d8b',\n      'darkslategray': '#2f4f4f',\n      'darkturquoise': '#00ced1',\n      'darkviolet': '#9400d3',\n      'deeppink': '#ff1493',\n      'deepskyblue': '#00bfff',\n      'dimgray': '#696969',\n      'dodgerblue': '#1e90ff',\n      'firebrick': '#b22222',\n      'floralwhite': '#fffaf0',\n      'forestgreen': '#228b22',\n      'fuchsia': '#ff00ff',\n      'gainsboro': '#dcdcdc',\n      'ghostwhite': '#f8f8ff',\n      'gold': '#ffd700',\n      'goldenrod': '#daa520',\n      'gray': '#808080',\n      'green': '#008000',\n      'greenyellow': '#adff2f',\n      'honeydew': '#f0fff0',\n      'hotpink': '#ff69b4',\n      'indianred ': '#cd5c5c',\n      'indigo ': '#4b0082',\n      'ivory': '#fffff0',\n      'khaki': '#f0e68c',\n      'lavender': '#e6e6fa',\n      'lavenderblush': '#fff0f5',\n      'lawngreen': '#7cfc00',\n      'lemonchiffon': '#fffacd',\n      'lightblue': '#add8e6',\n      'lightcoral': '#f08080',\n      'lightcyan': '#e0ffff',\n      'lightgoldenrodyellow': '#fafad2',\n      'lightgrey': '#d3d3d3',\n      'lightgreen': '#90ee90',\n      'lightpink': '#ffb6c1',\n      'lightsalmon': '#ffa07a',\n      'lightseagreen': '#20b2aa',\n      'lightskyblue': '#87cefa',\n      'lightslategray': '#778899',\n      'lightsteelblue': '#b0c4de',\n      'lightyellow': '#ffffe0',\n      'lime': '#00ff00',\n      'limegreen': '#32cd32',\n      'linen': '#faf0e6',\n      'magenta': '#ff00ff',\n      'maroon': '#800000',\n      'mediumaquamarine': '#66cdaa',\n      'mediumblue': '#0000cd',\n      'mediumorchid': '#ba55d3',\n      'mediumpurple': '#9370d8',\n      'mediumseagreen': '#3cb371',\n      'mediumslateblue': '#7b68ee',\n      'mediumspringgreen': '#00fa9a',\n      'mediumturquoise': '#48d1cc',\n      'mediumvioletred': '#c71585',\n      'midnightblue': '#191970',\n      'mintcream': '#f5fffa',\n      'mistyrose': '#ffe4e1',\n      'moccasin': '#ffe4b5',\n      'navajowhite': '#ffdead',\n      'navy': '#000080',\n      'orchid': '#da70d6',\n      'papayawhip': '#ffefd5',\n      'oldlace': '#fdf5e6',\n      'olive': '#808000',\n      'olivedrab': '#6b8e23',\n      'orange': '#ffa500',\n      'orangered': '#ff4500',\n      'palegoldenrod': '#eee8aa',\n      'palegreen': '#98fb98',\n      'paleturquoise': '#afeeee',\n      'palevioletred': '#d87093',\n      'peachpuff': '#ffdab9',\n      'peru': '#cd853f',\n      'pink': '#ffc0cb',\n      'plum': '#dda0dd',\n      'powderblue': '#b0e0e6',\n      'purple': '#800080',\n      'red': '#ff0000',\n      'rosybrown': '#bc8f8f',\n      'royalblue': '#4169e1',\n      'saddlebrown': '#8b4513',\n      'salmon': '#fa8072',\n      'sandybrown': '#f4a460',\n      'seagreen': '#2e8b57',\n      'seashell': '#fff5ee',\n      'sienna': '#a0522d',\n      'silver': '#c0c0c0',\n      'skyblue': '#87ceeb',\n      'slateblue': '#6a5acd',\n      'slategray': '#708090',\n      'snow': '#fffafa',\n      'springgreen': '#00ff7f',\n      'steelblue': '#4682b4',\n      'tan': '#d2b48c',\n      'teal': '#008080',\n      'thistle': '#d8bfd8',\n      'tomato': '#ff6347',\n      'turquoise': '#40e0d0',\n      'violet': '#ee82ee',\n      'wheat': '#f5deb3',\n      'white': '#ffffff',\n      'whitesmoke': '#f5f5f5',\n      'yellow': '#ffff00',\n      'yellowgreen': '#9acd32'\n    };\n\n    if (Object.prototype.toString.call(color) === '[object Array]') {\n      return color;\n    }\n\n    if (typeof colors[color.toLowerCase()] !== 'undefined') {\n      return colors[color.toLowerCase()];\n    }\n\n    return color;\n  };\n\n  return ColorMapping;\n}();\n\nexport { ColorMapping };","map":null,"metadata":{},"sourceType":"module"}