{"ast":null,"code":"var _jsxFileName = \"/Users/venu/my-app/src/components/newMap.js\";\n\n/*global google*/\nimport { render } from 'react-dom';\nimport React from \"react\";\nexport default class Maps extends React.Component {\n  render() {\n    google.load('visualization', '1', {\n      'packages': ['geochart']\n    });\n    google.setOnLoadCallback(drawVisualization);\n\n    function drawVisualization() {\n      var data = new google.visualization.DataTable();\n      var options = {\n        backgroundColor: {\n          fill: '#FFFFFF',\n          stroke: '#FFFFFF',\n          strokeWidth: 0\n        },\n        colorAxis: {\n          colors: ['yellow', 'orange', 'red']\n        },\n        backgroundColor: {\n          fill: '#FFFFFF',\n          stroke: '#FFFFFF',\n          strokeWidth: 0\n        },\n        datalessRegionColor: '#FFFFFF',\n        displayMode: 'regions',\n        enableRegionInteractivity: 'true',\n        resolution: 'provinces',\n        sizeAxis: {\n          minValue: 1,\n          maxValue: 1,\n          minSize: 10,\n          maxSize: 10\n        },\n        region: 'IN',\n        keepAspectRatio: true,\n        width: 800,\n        height: 500,\n        tooltip: {\n          textStyle: {\n            color: '#444444'\n          },\n          trigger: 'focus'\n        }\n      };\n      var chart = new google.visualization.GeoChart(document.getElementById('visualization'));\n      google.visualization.events.addListener(chart, 'select', function () {\n        var selection = chart.getSelection();\n\n        if (selection.length == 1) {\n          var selectedRow = selection[0].row;\n          var selectedRegion = data.getValue(selectedRow, 0);\n\n          if (ivalue[selectedRegion] != '') {\n            window.open(ivalue[selectedRegion]);\n          }\n        }\n      });\n      chart.draw(data, options);\n    }\n\n    return React.createElement(\"div\", {\n      id: \"visualization\",\n      style: {\n        width: \"700px\",\n        height: \"433px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/venu/my-app/src/components/newMap.js"],"names":["render","React","Maps","Component","google","load","setOnLoadCallback","drawVisualization","data","visualization","DataTable","options","backgroundColor","fill","stroke","strokeWidth","colorAxis","colors","datalessRegionColor","displayMode","enableRegionInteractivity","resolution","sizeAxis","minValue","maxValue","minSize","maxSize","region","keepAspectRatio","width","height","tooltip","textStyle","color","trigger","chart","GeoChart","document","getElementById","events","addListener","selection","getSelection","length","selectedRow","row","selectedRegion","getValue","ivalue","window","open","draw"],"mappings":";;AAAA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,eAAe,MAAMC,IAAN,SAAmBD,KAAK,CAACE,SAAzB,CAAmC;AAC9CH,EAAAA,MAAM,GAAG;AAGLI,IAAAA,MAAM,CAACC,IAAP,CAAY,eAAZ,EAA6B,GAA7B,EAAkC;AAAC,kBAAY,CAAC,UAAD;AAAb,KAAlC;AACAD,IAAAA,MAAM,CAACE,iBAAP,CAAyBC,iBAAzB;;AAEA,aAASA,iBAAT,GAA6B;AAE7B,UAAIC,IAAI,GAAG,IAAIJ,MAAM,CAACK,aAAP,CAAqBC,SAAzB,EAAX;AAIA,UAAIC,OAAO,GAAG;AACdC,QAAAA,eAAe,EAAE;AAACC,UAAAA,IAAI,EAAC,SAAN;AAAgBC,UAAAA,MAAM,EAAC,SAAvB;AAAkCC,UAAAA,WAAW,EAAC;AAA9C,SADH;AAEdC,QAAAA,SAAS,EAAE;AAACC,UAAAA,MAAM,EAAE,CAAC,QAAD,EAAU,QAAV,EAAoB,KAApB;AAAT,SAFG;AAGdL,QAAAA,eAAe,EAAE;AAACC,UAAAA,IAAI,EAAC,SAAN;AAAgBC,UAAAA,MAAM,EAAC,SAAvB;AAAkCC,UAAAA,WAAW,EAAC;AAA9C,SAHH;AAIdG,QAAAA,mBAAmB,EAAE,SAJP;AAKdC,QAAAA,WAAW,EAAE,SALC;AAMdC,QAAAA,yBAAyB,EAAE,MANb;AAOdC,QAAAA,UAAU,EAAE,WAPE;AAQdC,QAAAA,QAAQ,EAAE;AAACC,UAAAA,QAAQ,EAAE,CAAX;AAAcC,UAAAA,QAAQ,EAAC,CAAvB;AAAyBC,UAAAA,OAAO,EAAC,EAAjC;AAAsCC,UAAAA,OAAO,EAAE;AAA/C,SARI;AASdC,QAAAA,MAAM,EAAC,IATO;AAUdC,QAAAA,eAAe,EAAE,IAVH;AAWdC,QAAAA,KAAK,EAAC,GAXQ;AAYdC,QAAAA,MAAM,EAAC,GAZO;AAadC,QAAAA,OAAO,EAAE;AAACC,UAAAA,SAAS,EAAE;AAACC,YAAAA,KAAK,EAAE;AAAR,WAAZ;AAAgCC,UAAAA,OAAO,EAAC;AAAxC;AAbK,OAAd;AAgBA,UAAIC,KAAK,GAAG,IAAI/B,MAAM,CAACK,aAAP,CAAqB2B,QAAzB,CAAkCC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAlC,CAAZ;AACAlC,MAAAA,MAAM,CAACK,aAAP,CAAqB8B,MAArB,CAA4BC,WAA5B,CAAwCL,KAAxC,EAA+C,QAA/C,EAAyD,YAAW;AACpE,YAAIM,SAAS,GAAGN,KAAK,CAACO,YAAN,EAAhB;;AACA,YAAID,SAAS,CAACE,MAAV,IAAoB,CAAxB,EAA2B;AAC3B,cAAIC,WAAW,GAAGH,SAAS,CAAC,CAAD,CAAT,CAAaI,GAA/B;AACA,cAAIC,cAAc,GAAGtC,IAAI,CAACuC,QAAL,CAAcH,WAAd,EAA2B,CAA3B,CAArB;;AACA,cAAGI,MAAM,CAACF,cAAD,CAAN,IAA0B,EAA7B,EAAiC;AAAEG,YAAAA,MAAM,CAACC,IAAP,CAAYF,MAAM,CAACF,cAAD,CAAlB;AAAuC;AACzE;AACA,OAPD;AAQAX,MAAAA,KAAK,CAACgB,IAAN,CAAW3C,IAAX,EAAiBG,OAAjB;AACC;;AAED,WACI;AAAK,MAAA,EAAE,EAAC,eAAR;AAAwB,MAAA,KAAK,EAAE;AAACkB,QAAAA,KAAK,EAAE,OAAR;AAAiBC,QAAAA,MAAM,EAAE;AAAzB,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGH;;AA5C6C","sourcesContent":["/*global google*/\nimport { render } from 'react-dom';\nimport React from \"react\"\n\n\nexport default class Maps extends React.Component {\n    render() {\n\n\n        google.load('visualization', '1', {'packages': ['geochart']});\n        google.setOnLoadCallback(drawVisualization);\n        \n        function drawVisualization() {\n        \n        var data = new google.visualization.DataTable();\n        \n\n        \n        var options = {\n        backgroundColor: {fill:'#FFFFFF',stroke:'#FFFFFF' ,strokeWidth:0 },\n        colorAxis: {colors: ['yellow','orange', 'red']},\n        backgroundColor: {fill:'#FFFFFF',stroke:'#FFFFFF' ,strokeWidth:0 }, \n        datalessRegionColor: '#FFFFFF',\n        displayMode: 'regions', \n        enableRegionInteractivity: 'true', \n        resolution: 'provinces',\n        sizeAxis: {minValue: 1, maxValue:1,minSize:10,  maxSize: 10},\n        region:'IN',\n        keepAspectRatio: true,\n        width:800,\n        height:500,\n        tooltip: {textStyle: {color: '#444444'}, trigger:'focus'}\n        };\n        \n        var chart = new google.visualization.GeoChart(document.getElementById('visualization')); \n        google.visualization.events.addListener(chart, 'select', function() {\n        var selection = chart.getSelection();\n        if (selection.length == 1) {\n        var selectedRow = selection[0].row;\n        var selectedRegion = data.getValue(selectedRow, 0);\n        if(ivalue[selectedRegion] != '') { window.open(ivalue[selectedRegion]);  }\n        }\n        });\n        chart.draw(data, options);\n        }\n\n        return (\n            <div id=\"visualization\" style={{width: \"700px\", height: \"433px\"}}></div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}