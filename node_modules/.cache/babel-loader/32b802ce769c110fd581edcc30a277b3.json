{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport { itemHighlight } from '../index';\nimport { Browser, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { getElementsByClassName, getElement, removeClass, createStyle, customizeStyle, getTargetElement } from '../utils/helper';\n/**\n * Highlight module class\n */\n\n/* tslint:disable:no-string-literal */\n\nvar Highlight =\n/** @class */\nfunction () {\n  function Highlight(maps) {\n    this.maps = maps;\n    this.addEventListener();\n  }\n  /**\n   * To bind events for highlight module\n   */\n\n\n  Highlight.prototype.addEventListener = function () {\n    if (this.maps.isDestroyed) {\n      return;\n    }\n\n    this.maps.on(Browser.touchMoveEvent, this.mouseMove, this);\n    this.maps.on(Browser.touchStartEvent, this.mouseMove, this);\n  };\n  /**\n   * To unbind events for highlight module\n   */\n\n\n  Highlight.prototype.removeEventListener = function () {\n    if (this.maps.isDestroyed) {\n      return;\n    }\n\n    this.maps.off(Browser.touchMoveEvent, this.mouseMove);\n    this.maps.off(Browser.touchStartEvent, this.mouseMove);\n  };\n  /**\n   * Public method for highlight module\n   */\n\n\n  Highlight.prototype.addHighlight = function (layerIndex, name, enable) {\n    var targetEle = getTargetElement(layerIndex, name, enable, this.maps);\n\n    if (enable) {\n      this.mapHighlight(targetEle, null, null);\n    } else {\n      removeClass(targetEle);\n    }\n  };\n\n  Highlight.prototype.mouseMove = function (e) {\n    var targetEle = e.target;\n    var layerIndex;\n    var isTouch = e.pointerType === 'touch' || e.pointerType === '2' || e.type.indexOf('touch') > -1;\n\n    if ((targetEle.id.indexOf('LayerIndex') !== -1 || targetEle.id.indexOf('NavigationIndex') > -1) && targetEle.getAttribute('class') !== 'ShapeselectionMapStyle' && !isTouch && targetEle.getAttribute('class') !== 'MarkerselectionMapStyle') {\n      layerIndex = parseInt(targetEle.id.split('_LayerIndex_')[1].split('_')[0], 10);\n      var shapeData = void 0;\n      var data = void 0;\n      var shapeIn = void 0;\n      var dataIndex = void 0;\n\n      if (targetEle.id.indexOf('shapeIndex') > -1) {\n        shapeIn = parseInt(targetEle.id.split('_shapeIndex_')[1].split('_')[0], 10);\n        shapeData = this.maps.layers[layerIndex].shapeData['features'] ? this.maps.layers[layerIndex].shapeData['features'][shapeIn]['properties'] : null;\n        dataIndex = parseInt(targetEle.id.split('_dataIndex_')[1].split('_')[0], 10);\n        data = isNullOrUndefined(dataIndex) ? null : this.maps.layers[layerIndex].dataSource[dataIndex];\n        this.highlightSettings = this.maps.layers[layerIndex].highlightSettings;\n      } else if (targetEle.id.indexOf('BubbleIndex') > -1) {\n        var bubble = parseInt(targetEle.id.split('_BubbleIndex_')[1].split('_')[0], 10);\n        dataIndex = parseInt(targetEle.id.split('_dataIndex_')[1].split('_')[0], 10);\n        data = this.maps.layers[layerIndex].bubbleSettings[bubble].dataSource[dataIndex];\n        this.highlightSettings = this.maps.layers[layerIndex].bubbleSettings[bubble].highlightSettings;\n      } else if (targetEle.id.indexOf('MarkerIndex') > -1) {\n        var marker = parseInt(targetEle.id.split('_MarkerIndex_')[1].split('_')[0], 10);\n        dataIndex = parseInt(targetEle.id.split('_dataIndex_')[1].split('_')[0], 10);\n        data = this.maps.layers[layerIndex].markerSettings[marker].dataSource[dataIndex];\n        this.highlightSettings = this.maps.layers[layerIndex].markerSettings[marker].highlightSettings;\n      } else {\n        var index = parseInt(targetEle.id.split('_NavigationIndex_')[1].split('_')[0], 10);\n        layerIndex = parseInt(targetEle.id.split('_LayerIndex_')[1].split('_')[0], 10);\n        shapeData = null;\n        data = {\n          latitude: this.maps.layers[layerIndex].navigationLineSettings[index].latitude,\n          longitude: this.maps.layers[layerIndex].navigationLineSettings[index].longitude\n        };\n        this.highlightSettings = this.maps.layers[layerIndex].navigationLineSettings[index].highlightSettings;\n      }\n\n      if (this.highlightSettings.enable) {\n        if (this.maps.legendSettings.visible && targetEle.id.indexOf('_MarkerIndex_') === -1) {\n          this.maps.legendModule.shapeHighLightAndSelection(targetEle, data, this.highlightSettings, 'highlight', layerIndex);\n        }\n\n        this.mapHighlight(targetEle, shapeData, data);\n      } else {\n        var element = document.getElementsByClassName('highlightMapStyle')[0];\n\n        if (!isNullOrUndefined(element)) {\n          removeClass(element);\n\n          if (element.id.indexOf('NavigationIndex') > -1) {\n            var index = parseInt(element.id.split('_NavigationIndex_')[1].split('_')[0], 10);\n            var layerIndex_1 = parseInt(element.parentElement.id.split('_LayerIndex_')[1].split('_')[0], 10);\n            element.setAttribute('stroke-width', this.maps.layers[layerIndex_1].navigationLineSettings[index].width.toString());\n            element.setAttribute('stroke', this.maps.layers[layerIndex_1].navigationLineSettings[index].color);\n          }\n        }\n      }\n    } else if (getElementsByClassName('highlightMapStyle').length > 0) {\n      targetEle = getElementsByClassName('highlightMapStyle')[0];\n\n      if (targetEle.id.indexOf('NavigationIndex') > -1) {\n        var index = parseInt(targetEle.id.split('_NavigationIndex_')[1].split('_')[0], 10);\n        layerIndex = parseInt(targetEle.parentElement.id.split('_LayerIndex_')[1].split('_')[0], 10);\n        targetEle.setAttribute('stroke-width', this.maps.layers[layerIndex].navigationLineSettings[index].width.toString());\n        targetEle.setAttribute('stroke', this.maps.layers[layerIndex].navigationLineSettings[index].color);\n      }\n\n      removeClass(targetEle);\n\n      if (this.maps.legendSettings.visible) {\n        this.maps.legendModule.removeShapeHighlightCollection();\n      }\n    } else if ((targetEle.id.indexOf(this.maps.element.id + '_Legend_Shape_Index') !== -1 || targetEle.id.indexOf(this.maps.element.id + '_Legend_Index') !== -1) && this.maps.legendSettings.visible && targetEle.id.indexOf('_Text') === -1) {\n      this.maps.legendModule.legendHighLightAndSelection(targetEle, 'highlight');\n    } else {\n      if (this.maps.legendSettings.visible) {\n        this.maps.legendModule.removeLegendHighlightCollection();\n      }\n    }\n  };\n\n  Highlight.prototype.mapHighlight = function (targetEle, shapeData, data) {\n    var _this = this;\n\n    var layerIndex = parseInt(targetEle.id.split('_LayerIndex_')[1].split('_')[0], 10);\n    var isMarkerSelect = false;\n\n    if (targetEle.id.indexOf('MarkerIndex') > -1) {\n      var marker = parseInt(targetEle.id.split('_MarkerIndex_')[1].split('_')[0], 10);\n      isMarkerSelect = this.maps.layers[layerIndex].markerSettings[marker].highlightSettings.enable;\n    }\n\n    if (this.maps.legendSettings.visible ? this.maps.legendModule.legendElement !== this.maps.legendModule.oldShapeElement : true) {\n      var border = {\n        color: this.highlightSettings.border.color,\n        width: this.highlightSettings.border.width / (isMarkerSelect ? 1 : this.maps.scale)\n      };\n      var eventArgs_1 = {\n        opacity: this.highlightSettings.opacity,\n        fill: targetEle.id.indexOf('NavigationIndex') === -1 ? !isNullOrUndefined(this.highlightSettings.fill) ? this.highlightSettings.fill : targetEle.getAttribute('fill') : 'none',\n        border: border,\n        name: itemHighlight,\n        target: targetEle.id,\n        cancel: false,\n        shapeData: shapeData,\n        data: data,\n        maps: this.maps\n      };\n\n      if (this.maps.isBlazor) {\n        var shapeData_1 = eventArgs_1.shapeData,\n            maps = eventArgs_1.maps,\n            blazorEventArgs = __rest(eventArgs_1, [\"shapeData\", \"maps\"]);\n\n        eventArgs_1 = blazorEventArgs;\n      }\n\n      this.maps.trigger(itemHighlight, eventArgs_1, function () {\n        _this.highlightMap(targetEle, eventArgs_1);\n      });\n    }\n  };\n\n  Highlight.prototype.highlightMap = function (targetEle, eventArgs) {\n    var parentElement;\n    var children;\n\n    if (targetEle.getAttribute('class') === 'highlightMapStyle') {\n      return;\n    } else {\n      if (getElementsByClassName('highlightMapStyle').length > 0) {\n        var elem = getElementsByClassName('highlightMapStyle')[0];\n        removeClass(elem);\n\n        if (elem.id.indexOf('NavigationIndex') > -1) {\n          var index = parseInt(elem.id.split('_NavigationIndex_')[1].split('_')[0], 10);\n          var layerIndex = parseInt(elem.parentElement.id.split('_LayerIndex_')[1].split('_')[0], 10);\n          elem.setAttribute('stroke-width', this.maps.layers[layerIndex].navigationLineSettings[index].width.toString());\n          elem.setAttribute('stroke', this.maps.layers[layerIndex].navigationLineSettings[index].color);\n        }\n      }\n\n      if (!getElement('highlightMap')) {\n        document.body.appendChild(createStyle('highlightMap', 'highlightMapStyle', eventArgs));\n      } else {\n        customizeStyle('highlightMap', 'highlightMapStyle', eventArgs);\n      }\n\n      targetEle.setAttribute('class', 'highlightMapStyle');\n    }\n  };\n  /**\n   * Get module name.\n   */\n\n\n  Highlight.prototype.getModuleName = function () {\n    return 'Highlight';\n  };\n  /**\n   * To destroy the highlight.\n   * @return {void}\n   * @private\n   */\n\n\n  Highlight.prototype.destroy = function (maps) {\n    /**\n     * Destroy method performed here\n     */\n    this.removeEventListener();\n  };\n\n  return Highlight;\n}();\n\nexport { Highlight };","map":null,"metadata":{},"sourceType":"module"}