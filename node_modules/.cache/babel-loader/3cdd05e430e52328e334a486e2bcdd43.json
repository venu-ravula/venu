{"ast":null,"code":"/**\n * To import utils\n */\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n\nvar SvgRenderer =\n/** @class */\nfunction () {\n  /* End-Properties */\n  function SvgRenderer(rootID) {\n    //Internal Variables \n    this.svgLink = 'http://www.w3.org/2000/svg';\n    this.rootId = rootID;\n  } // method to get the attributes value\n\n  /* tslint:disable */\n\n\n  SvgRenderer.prototype.getOptionValue = function (options, key) {\n    return options[key];\n  };\n  /* tslint:enable */\n\n  /**\n   * To create a Html5 SVG element\n   * @param {SVGAttributes} options - Options to create SVG\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createSvg = function (options) {\n    if (isNullOrUndefined(options.id)) {\n      options.id = this.rootId + '_svg';\n    }\n\n    this.svgObj = document.getElementById(options.id);\n\n    if (isNullOrUndefined(document.getElementById(options.id))) {\n      this.svgObj = document.createElementNS(this.svgLink, 'svg');\n    }\n\n    this.svgObj = this.setElementAttributes(options, this.svgObj);\n    this.setSVGSize(options.width, options.height);\n    return this.svgObj;\n  }; // method to set the height and width for the SVG element\n\n\n  SvgRenderer.prototype.setSVGSize = function (width, height) {\n    var element = document.getElementById(this.rootId);\n    var size = !isNullOrUndefined(element) ? element.getBoundingClientRect() : null;\n\n    if (isNullOrUndefined(this.width) || this.width <= 0) {\n      this.svgObj.setAttribute('width', width ? width.toString() : size.width.toString());\n    } else {\n      this.svgObj.setAttribute('width', this.width.toString());\n    }\n\n    if (isNullOrUndefined(this.height) || this.height <= 0) {\n      this.svgObj.setAttribute('height', height ? height.toString() : '450');\n    } else {\n      this.svgObj.setAttribute('height', this.height.toString());\n    }\n  };\n  /**\n   * To draw a path\n   * @param {PathAttributes} options - Options to draw a path in SVG\n   * @param {Int32Array} canvasTranslate - Used as dummy variable for canvas rendering\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawPath = function (options, canvasTranslate) {\n    var path = document.getElementById(options.id);\n\n    if (path === null) {\n      path = document.createElementNS(this.svgLink, 'path');\n    }\n\n    path = this.setElementAttributes(options, path);\n    return path;\n  };\n  /**\n   * To draw a line\n   * @param {LineAttributes} options - Options to draw a line in SVG\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawLine = function (options) {\n    var line = document.getElementById(options.id);\n\n    if (line === null) {\n      line = document.createElementNS(this.svgLink, 'line');\n    }\n\n    line = this.setElementAttributes(options, line);\n    return line;\n  };\n  /**\n   * To draw a rectangle\n   * @param {BaseAttibutes} options - Required options to draw a rectangle in SVG\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawRectangle = function (options, canvasTranslate) {\n    var rectangle = document.getElementById(options.id);\n\n    if (rectangle === null) {\n      rectangle = document.createElementNS(this.svgLink, 'rect');\n    }\n\n    rectangle = this.setElementAttributes(options, rectangle);\n    return rectangle;\n  };\n  /**\n   * To draw a circle\n   * @param {CircleAttributes} options - Required options to draw a circle in SVG\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawCircle = function (options) {\n    var circle = document.getElementById(options.id);\n\n    if (circle === null) {\n      circle = document.createElementNS(this.svgLink, 'circle');\n    }\n\n    circle = this.setElementAttributes(options, circle);\n    return circle;\n  };\n  /**\n   * To draw a polyline\n   * @param {PolylineAttributes} options - Options required to draw a polyline\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawPolyline = function (options) {\n    var polyline = document.getElementById(options.id);\n\n    if (polyline === null) {\n      polyline = document.createElementNS(this.svgLink, 'polyline');\n    }\n\n    polyline = this.setElementAttributes(options, polyline);\n    return polyline;\n  };\n  /**\n   * To draw an ellipse\n   * @param {EllipseAttributes} options - Options required to draw an ellipse\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawEllipse = function (options) {\n    var ellipse = document.getElementById(options.id);\n\n    if (ellipse === null) {\n      ellipse = document.createElementNS(this.svgLink, 'ellipse');\n    }\n\n    ellipse = this.setElementAttributes(options, ellipse);\n    return ellipse;\n  };\n  /**\n   * To draw a polygon\n   * @param {PolylineAttributes} options - Options needed to draw a polygon in SVG\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawPolygon = function (options) {\n    var polygon = document.getElementById(options.id);\n\n    if (polygon === null) {\n      polygon = document.createElementNS(this.svgLink, 'polygon');\n    }\n\n    polygon = this.setElementAttributes(options, polygon);\n    return polygon;\n  };\n  /**\n   * To draw an image\n   * @param {ImageAttributes} options - Required options to draw an image in SVG\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawImage = function (options) {\n    var img = document.createElementNS(this.svgLink, 'image');\n    img.setAttributeNS(null, 'height', options.height.toString());\n    img.setAttributeNS(null, 'width', options.width.toString());\n    img.setAttributeNS('http://www.w3.org/1999/xlink', 'href', options.href);\n    img.setAttributeNS(null, 'x', options.x.toString());\n    img.setAttributeNS(null, 'y', options.y.toString());\n    img.setAttributeNS(null, 'id', options.id);\n    img.setAttributeNS(null, 'visibility', options.visibility);\n\n    if (!isNullOrUndefined(this.getOptionValue(options, 'clip-path'))) {\n      img.setAttributeNS(null, 'clip-path', this.getOptionValue(options, 'clip-path'));\n    }\n\n    if (!isNullOrUndefined(options.preserveAspectRatio)) {\n      img.setAttributeNS(null, 'preserveAspectRatio', options.preserveAspectRatio);\n    }\n\n    return img;\n  };\n  /**\n   * To draw a text\n   * @param {TextAttributes} options - Options needed to draw a text in SVG\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createText = function (options, label, transX, transY) {\n    var text = document.createElementNS(this.svgLink, 'text');\n    text = this.setElementAttributes(options, text);\n\n    if (!isNullOrUndefined(label)) {\n      text.textContent = label;\n    }\n\n    return text;\n  };\n  /**\n   * To create a tSpan\n   * @param {TextAttributes} options - Options to create tSpan\n   * @param {string} label - The text content which is to be rendered in the tSpan\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createTSpan = function (options, label) {\n    var tSpan = document.createElementNS(this.svgLink, 'tspan');\n    tSpan = this.setElementAttributes(options, tSpan);\n\n    if (!isNullOrUndefined(label)) {\n      tSpan.textContent = label;\n    }\n\n    return tSpan;\n  };\n  /**\n   * To create a title\n   * @param {string} text - The text content which is to be rendered in the title\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createTitle = function (text) {\n    var title = document.createElementNS(this.svgLink, 'title');\n    title.textContent = text;\n    return title;\n  };\n  /**\n   * To create defs element in SVG\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createDefs = function () {\n    var defs = document.createElementNS(this.svgLink, 'defs');\n    return defs;\n  };\n  /**\n   * To create clip path in SVG\n   * @param {BaseAttibutes} options - Options needed to create clip path\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createClipPath = function (options) {\n    var clipPath = document.createElementNS(this.svgLink, 'clipPath');\n    clipPath = this.setElementAttributes(options, clipPath);\n    return clipPath;\n  };\n  /**\n   * To create foreign object in SVG\n   * @param {BaseAttibutes} options - Options needed to create foreign object\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createForeignObject = function (options) {\n    var foreignObject = document.createElementNS(this.svgLink, 'foreignObject');\n    foreignObject = this.setElementAttributes(options, foreignObject);\n    return foreignObject;\n  };\n  /**\n   * To create group element in SVG\n   * @param {BaseAttibutes} options - Options needed to create group\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createGroup = function (options) {\n    var group = document.createElementNS(this.svgLink, 'g');\n    group = this.setElementAttributes(options, group);\n    return group;\n  };\n  /**\n   * To create pattern in SVG\n   * @param {PatternAttributes} options - Required options to create pattern in SVG\n   * @param {string} type - Specifies the name of the pattern\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.createPattern = function (options, element) {\n    var pattern = document.createElementNS(this.svgLink, element);\n    pattern = this.setElementAttributes(options, pattern);\n    return pattern;\n  };\n  /**\n   * To create radial gradient in SVG\n   * @param {string[]} colors - Specifies the colors required to create radial gradient\n   * @param {string[]} colorStop - Specifies the colorstop required to create radial gradient\n   * @param {string} name - Specifies the name of the gradient\n   * @param {RadialGradient} options - value for radial gradient\n   * @return {string}\n   */\n\n\n  SvgRenderer.prototype.createRadialGradient = function (colors, name, options) {\n    var colorName;\n\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      var newOptions = {\n        'id': this.rootId + '_' + name + 'radialGradient',\n        'cx': options.cx + '%',\n        'cy': options.cy + '%',\n        'r': options.r + '%',\n        'fx': options.fx + '%',\n        'fy': options.fy + '%'\n      };\n      this.drawGradient('radialGradient', newOptions, colors);\n      colorName = 'url(#' + this.rootId + '_' + name + 'radialGradient)';\n    } else {\n      colorName = colors[0].color.toString();\n    }\n\n    return colorName;\n  };\n  /**\n   * To create linear gradient in SVG\n   * @param {string[]} colors - Array of string specifies the values for color\n   * @param {string[]} colors - Array of string specifies the values for colorStop\n   * @param {string} name - Specifies the name of the gradient\n   * @param {LinearGradient} options - Specifies the options for gradient\n   * @return {string}\n   */\n\n\n  SvgRenderer.prototype.createLinearGradient = function (colors, name, options) {\n    var colorName;\n\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      var newOptions = {\n        'id': this.rootId + '_' + name + 'linearGradient',\n        'x1': options.x1 + '%',\n        'y1': options.y1 + '%',\n        'x2': options.x2 + '%',\n        'y2': options.y2 + '%'\n      };\n      this.drawGradient('linearGradient', newOptions, colors);\n      colorName = 'url(#' + this.rootId + '_' + name + 'linearGradient)';\n    } else {\n      colorName = colors[0].color.toString();\n    }\n\n    return colorName;\n  };\n  /**\n   * To render the gradient element in SVG\n   * @param {string} gradientType - Specifies the type of the gradient\n   * @param {RadialGradient | LinearGradient} options - Options required to render a gradient\n   * @param {string[]} colors - Array of string specifies the values for color\n   * @param {string[]} colorStop - Array of string specifies the values for colorStop\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawGradient = function (gradientType, options, colors) {\n    var defs = this.createDefs();\n    var gradient = document.createElementNS(this.svgLink, gradientType);\n    gradient = this.setElementAttributes(options, gradient);\n\n    for (var i = 0; i < colors.length; i++) {\n      var stop_1 = document.createElementNS(this.svgLink, 'stop');\n      stop_1.setAttribute('offset', colors[i].colorStop);\n      stop_1.setAttribute('stop-color', colors[i].color);\n      stop_1.setAttribute('stop-opacity', '1');\n      gradient.appendChild(stop_1);\n    }\n\n    defs.appendChild(gradient);\n    return defs;\n  };\n  /**\n   * To render a clip path\n   * @param {BaseAttibutes} options - Options required to render a clip path\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawClipPath = function (options) {\n    var defs = this.createDefs();\n    var clipPath = this.createClipPath({\n      'id': options.id\n    });\n    options.id = options.id + '_Rect';\n    var rect = this.drawRectangle(options);\n    clipPath.appendChild(rect);\n    defs.appendChild(clipPath);\n    return defs;\n  };\n  /**\n   * To create circular clip path in SVG\n   * @param {CircleAttributes} options - Options required to create circular clip path\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.drawCircularClipPath = function (options) {\n    var defs = this.createDefs();\n    var clipPath = this.createClipPath({\n      'id': options.id\n    });\n    options.id = options.id + '_Circle';\n    var circle = this.drawCircle(options);\n    clipPath.appendChild(circle);\n    defs.appendChild(clipPath);\n    return defs;\n  };\n  /**\n   * To set the attributes to the element\n   * @param {SVGCanvasAttributes} options - Attributes to set for the element\n   * @param {Element} element - The element to which the attributes need to be set\n   * @return {Element}\n   */\n\n\n  SvgRenderer.prototype.setElementAttributes = function (options, element) {\n    var keys = Object.keys(options);\n\n    for (var i = 0; i < keys.length; i++) {\n      element.setAttribute(keys[i], options[keys[i]]);\n    }\n\n    return element;\n  };\n  /**\n   * To create a Html5 canvas element\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   * @param {BaseAttibutes} options - Options to create canvas\n   * @return {HTMLCanvasElement}\n   */\n\n\n  SvgRenderer.prototype.createCanvas = function (options) {\n    return null;\n  };\n\n  return SvgRenderer;\n}();\n\nexport { SvgRenderer };","map":null,"metadata":{},"sourceType":"module"}