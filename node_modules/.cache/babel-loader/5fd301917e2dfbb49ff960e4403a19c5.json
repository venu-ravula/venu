{"ast":null,"code":"/**\n * PdfNumbersConvertor.ts class for EJ2-PDF\n * @private\n */\nimport { PdfNumberStyle } from './../../pages/enum';\n/**\n * `PdfNumbersConvertor` for convert page number into numbers, roman letters, etc.,\n * @private\n */\n\nvar PdfNumbersConvertor =\n/** @class */\nfunction () {\n  function PdfNumbersConvertor() {} // Static methods\n\n  /**\n   * Convert string value from page number with correct format.\n   * @private\n   */\n\n\n  PdfNumbersConvertor.convert = function (intArabic, numberStyle) {\n    var result = '';\n\n    switch (numberStyle) {\n      case PdfNumberStyle.None:\n        result = '';\n        break;\n\n      case PdfNumberStyle.Numeric:\n        result = intArabic.toString();\n        break;\n\n      case PdfNumberStyle.LowerLatin:\n        result = this.arabicToLetter(intArabic).toLowerCase();\n        break;\n\n      case PdfNumberStyle.LowerRoman:\n        result = this.arabicToRoman(intArabic).toLowerCase();\n        break;\n\n      case PdfNumberStyle.UpperLatin:\n        result = this.arabicToLetter(intArabic);\n        break;\n\n      case PdfNumberStyle.UpperRoman:\n        result = this.arabicToRoman(intArabic);\n        break;\n    }\n\n    return result;\n  };\n  /**\n   * Converts `arabic to roman` letters.\n   * @private\n   */\n\n\n  PdfNumbersConvertor.arabicToRoman = function (intArabic) {\n    var retval = '';\n    retval += this.generateNumber(intArabic, 1000, 'M');\n    retval += this.generateNumber(intArabic, 900, 'CM');\n    retval += this.generateNumber(intArabic, 500, 'D');\n    retval += this.generateNumber(intArabic, 400, 'CD');\n    retval += this.generateNumber(intArabic, 100, 'C');\n    retval += this.generateNumber(intArabic, 90, 'XC');\n    retval += this.generateNumber(intArabic, 50, 'L');\n    retval += this.generateNumber(intArabic, 40, 'XL');\n    retval += this.generateNumber(intArabic, 10, 'X');\n    retval += this.generateNumber(intArabic, 9, 'IX');\n    retval += this.generateNumber(intArabic, 5, 'V');\n    retval += this.generateNumber(intArabic, 4, 'IV');\n    retval += this.generateNumber(intArabic, 1, 'I');\n    return retval.toString();\n  };\n  /**\n   * Converts `arabic to normal letters`.\n   * @private\n   */\n\n\n  PdfNumbersConvertor.arabicToLetter = function (arabic) {\n    var stack = this.convertToLetter(arabic);\n    var result = '';\n\n    while (stack.length > 0) {\n      var num = stack.pop();\n      result = this.appendChar(result, num);\n    }\n\n    return result.toString();\n  };\n  /**\n   * Generate a string value of an input number.\n   * @private\n   */\n\n\n  PdfNumbersConvertor.generateNumber = function (value, magnitude, letter) {\n    var numberstring = '';\n\n    while (value >= magnitude) {\n      value -= magnitude;\n      numberstring += letter;\n    }\n\n    return numberstring.toString();\n  };\n  /**\n   * Convert a input number into letters.\n   * @private\n   */\n\n\n  PdfNumbersConvertor.convertToLetter = function (arabic) {\n    if (arabic <= 0) {\n      throw Error('ArgumentOutOfRangeException-arabic, Value can not be less 0');\n    }\n\n    var stack = [];\n\n    while (arabic > this.letterLimit) {\n      var remainder = arabic % this.letterLimit;\n\n      if (remainder === 0.0) {\n        arabic = arabic / this.letterLimit - 1;\n        remainder = this.letterLimit;\n      } else {\n        arabic /= this.letterLimit;\n      }\n\n      stack.push(remainder);\n    }\n\n    stack.push(arabic);\n    return stack;\n  };\n  /**\n   * Convert number to actual string value.\n   * @private\n   */\n\n\n  PdfNumbersConvertor.appendChar = function (builder, value) {\n    var letter = String.fromCharCode(PdfNumbersConvertor.acsiiStartIndex + value);\n    builder += letter;\n    return builder;\n  }; // Fields\n\n  /**\n   * numbers of letters in english [readonly].\n   * @default = 26.0\n   * @private\n   */\n\n\n  PdfNumbersConvertor.letterLimit = 26.0;\n  /**\n   * Resturns `acsii start index` value.\n   * @default 64\n   * @private\n   */\n\n  PdfNumbersConvertor.acsiiStartIndex = 65 - 1;\n  return PdfNumbersConvertor;\n}();\n\nexport { PdfNumbersConvertor };","map":null,"metadata":{},"sourceType":"module"}