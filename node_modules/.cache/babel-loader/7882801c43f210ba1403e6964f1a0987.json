{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport { click, itemSelection } from '../index';\nimport { getElementsByClassName, getElement, createStyle, customizeStyle, removeClass, getTargetElement } from '../utils/helper';\nimport { isNullOrUndefined, Browser } from '@syncfusion/ej2-base';\n/**\n * Selection module class\n */\n\nvar Selection =\n/** @class */\nfunction () {\n  /* tslint:disable:no-string-literal */\n  function Selection(maps) {\n    this.maps = maps;\n    this.addEventListener();\n  }\n  /**\n   * For binding events to selection module\n   */\n\n\n  Selection.prototype.addEventListener = function () {\n    if (!this.maps.isDestroyed) {\n      this.maps.on(click, this.mouseClick, this);\n      this.maps.on(Browser.touchEndEvent, this.mouseClick, this);\n    }\n  };\n  /**\n   * For removing events from selection modue\n   */\n\n\n  Selection.prototype.removeEventListener = function () {\n    if (this.maps.isDestroyed) {\n      return;\n    }\n\n    this.maps.off(click, this.mouseClick);\n    this.maps.off(Browser.touchEndEvent, this.mouseClick);\n  };\n\n  Selection.prototype.mouseClick = function (targetEle) {\n    if (!isNullOrUndefined(targetEle['type']) && targetEle['type'].indexOf('touch') !== -1 && isNullOrUndefined(targetEle.id)) {\n      targetEle = targetEle['target'];\n    }\n\n    if (!isNullOrUndefined(targetEle.id) && (targetEle.id.indexOf('LayerIndex') > -1 || targetEle.id.indexOf('NavigationIndex') > -1)) {\n      var layerIndex = void 0;\n      var shapeData = void 0;\n      var data = void 0;\n      var shapeIndex = void 0;\n      var dataIndex = void 0;\n      layerIndex = parseInt(targetEle.id.split('_LayerIndex_')[1].split('_')[0], 10);\n\n      if (targetEle.id.indexOf('shapeIndex') > -1) {\n        shapeIndex = parseInt(targetEle.id.split('_shapeIndex_')[1].split('_')[0], 10);\n        shapeData = this.maps.layers[layerIndex].shapeData['features']['length'] > shapeIndex ? this.maps.layers[layerIndex].shapeData['features'][shapeIndex]['properties'] : null;\n        dataIndex = parseInt(targetEle.id.split('_dataIndex_')[1].split('_')[0], 10);\n        data = isNullOrUndefined(dataIndex) ? null : this.maps.layers[layerIndex].dataSource[dataIndex];\n        this.selectionsettings = this.maps.layers[layerIndex].selectionSettings;\n        this.selectionType = 'Shape';\n      } else if (targetEle.id.indexOf('BubbleIndex') > -1) {\n        var bubbleIndex = parseInt(targetEle.id.split('_BubbleIndex_')[1].split('_')[0], 10);\n        dataIndex = parseInt(targetEle.id.split('_dataIndex_')[1].split('_')[0], 10);\n        data = this.maps.layers[layerIndex].bubbleSettings[bubbleIndex].dataSource[dataIndex];\n        this.selectionsettings = this.maps.layers[layerIndex].bubbleSettings[bubbleIndex].selectionSettings;\n        this.selectionType = 'Bubble';\n      } else if (targetEle.id.indexOf('MarkerIndex') > -1) {\n        var markerIndex = parseInt(targetEle.id.split('_MarkerIndex_')[1].split('_')[0], 10);\n        dataIndex = parseInt(targetEle.id.split('_dataIndex_')[1].split('_')[0], 10);\n        data = this.maps.layers[layerIndex].markerSettings[markerIndex].dataSource[dataIndex];\n        this.selectionsettings = this.maps.layers[layerIndex].markerSettings[markerIndex].selectionSettings;\n        this.selectionType = 'Marker';\n      } else {\n        var index = parseInt(targetEle.id.split('_NavigationIndex_')[1].split('_')[0], 10);\n        shapeData = null;\n        data = {\n          latitude: this.maps.layers[layerIndex].navigationLineSettings[index].latitude,\n          longitude: this.maps.layers[layerIndex].navigationLineSettings[index].longitude\n        };\n        this.selectionsettings = this.maps.layers[layerIndex].navigationLineSettings[index].selectionSettings;\n        this.selectionType = 'navigationline';\n      }\n\n      if (this.selectionsettings.enable) {\n        if (this.maps.legendSettings.visible && targetEle.id.indexOf('_MarkerIndex_') === -1) {\n          this.maps.legendModule.shapeHighLightAndSelection(targetEle, data, this.selectionsettings, 'selection', layerIndex);\n        }\n\n        if (this.maps.legendSettings.visible ? this.maps.legendModule.legendSelection : true) {\n          this.selectMap(targetEle, shapeData, data);\n        }\n      }\n    } else if (!isNullOrUndefined(targetEle.id) && (targetEle.id.indexOf(this.maps.element.id + '_Legend_Shape_Index') > -1 || targetEle.id.indexOf(this.maps.element.id + '_Legend_Index') !== -1) && this.maps.legendSettings.visible && targetEle.id.indexOf('_Text') === -1) {\n      this.maps.legendModule.legendHighLightAndSelection(targetEle, 'selection');\n    }\n  };\n  /**\n   * Public method for selection\n   */\n\n\n  Selection.prototype.addSelection = function (layerIndex, name, enable) {\n    var targetEle = getTargetElement(layerIndex, name, enable, this.maps);\n\n    if (enable) {\n      this.selectMap(targetEle, null, null);\n    } else {\n      removeClass(targetEle);\n    }\n  };\n  /**\n   * Method for selection\n   */\n\n\n  Selection.prototype.selectMap = function (targetEle, shapeData, data) {\n    var _this = this;\n\n    var parentElement;\n    var children;\n    var selectionsettings = this.selectionsettings;\n    var border = {\n      color: this.selectionsettings.border.color,\n      width: this.selectionsettings.border.width / (this.selectionType === 'Marker' ? 1 : this.maps.scale)\n    };\n    var eventArgs = {\n      opacity: this.selectionsettings.opacity,\n      fill: this.selectionType !== 'navigationline' ? this.selectionsettings.fill : 'none',\n      border: border,\n      name: itemSelection,\n      target: targetEle.id,\n      cancel: false,\n      shapeData: shapeData,\n      data: data,\n      maps: this.maps\n    };\n\n    if (this.maps.isBlazor) {\n      var shapeData_1 = eventArgs.shapeData,\n          maps = eventArgs.maps,\n          blazorEventArgs = __rest(eventArgs, [\"shapeData\", \"maps\"]);\n\n      eventArgs = blazorEventArgs;\n    }\n\n    this.maps.trigger('itemSelection', eventArgs, function (observedArgs) {\n      // if (this.maps.legendSettings.visible && !this.maps.legendSettings.toggleVisibility\n      // && this.maps.legendSettings.legendSelection) {\n      //     this.removeLegendSelection(this.maps.legendModule.legendCollection, targetEle);\n      // }\n      if (targetEle.getAttribute('class') === _this.selectionType + 'selectionMapStyle') {\n        removeClass(targetEle);\n\n        if (targetEle.id.indexOf('NavigationIndex') > -1) {\n          var index = parseInt(targetEle.id.split('_NavigationIndex_')[1].split('_')[0], 10);\n          var layerIndex = parseInt(targetEle.parentElement.id.split('_LayerIndex_')[1].split('_')[0], 10);\n          targetEle.setAttribute('stroke-width', _this.maps.layers[layerIndex].navigationLineSettings[index].width.toString());\n          targetEle.setAttribute('stroke', _this.maps.layers[layerIndex].navigationLineSettings[index].color);\n        }\n      } else {\n        if (!_this.selectionsettings.enableMultiSelect && getElementsByClassName(_this.selectionType + 'selectionMapStyle').length > 0) {\n          var ele = getElementsByClassName(_this.selectionType + 'selectionMapStyle')[0];\n          removeClass(ele);\n\n          if (ele.id.indexOf('NavigationIndex') > -1) {\n            var index = parseInt(targetEle.id.split('_NavigationIndex_')[1].split('_')[0], 10);\n            var layerIndex = parseInt(targetEle.parentElement.id.split('_LayerIndex_')[1].split('_')[0], 10);\n            ele.setAttribute('stroke-width', _this.maps.layers[layerIndex].navigationLineSettings[index].width.toString());\n            ele.setAttribute('stroke', _this.maps.layers[layerIndex].navigationLineSettings[index].color);\n          }\n        }\n\n        if (!getElement(_this.selectionType + 'selectionMap')) {\n          document.body.appendChild(createStyle(_this.selectionType + 'selectionMap', _this.selectionType + 'selectionMapStyle', eventArgs));\n        } else {\n          customizeStyle(_this.selectionType + 'selectionMap', _this.selectionType + 'selectionMapStyle', eventArgs);\n        }\n\n        targetEle.setAttribute('class', _this.selectionType + 'selectionMapStyle');\n      }\n    });\n  };\n  /**\n   * Remove legend selection\n   */\n  // private removeLegendSelection(legendCollection: Object[], targetEle: Element): void {\n  //     let shape: Element;\n  //     if (!this.selectionsettings.enableMultiSelect) {\n  //        for (let i: number = 0; i < legendCollection.length; i++) {\n  //             for (let data of legendCollection[i]['data']) {\n  //                 shape = getElement(this.maps.element.id + '_LayerIndex_' + data['layerIndex'] +\n  //                            '_shapeIndex_' + data['shapeIndex'] + '_dataIndex_' + data['dataIndex']);\n  //                 removeClass(shape);\n  //             }\n  //         }\n  //     }\n  // }\n\n  /**\n   * Get module name.\n   */\n\n\n  Selection.prototype.getModuleName = function () {\n    return 'Selection';\n  };\n  /**\n   * To destroy the selection.\n   * @return {void}\n   * @private\n   */\n\n\n  Selection.prototype.destroy = function (maps) {\n    /**\n     * Destroy method performed here\n     */\n    this.removeEventListener();\n  };\n\n  return Selection;\n}();\n\nexport { Selection };","map":null,"metadata":{},"sourceType":"module"}