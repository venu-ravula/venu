{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport { tooltipRender } from '../index';\nimport { Tooltip } from '@syncfusion/ej2-svg-base';\nimport { createElement, Browser, isNullOrUndefined, extend, remove } from '@syncfusion/ej2-base';\nimport { checkShapeDataFields, getMousePosition, Internalize, checkPropertyPath } from '../utils/helper';\n/**\n * Map Tooltip\n */\n\nvar MapsTooltip =\n/** @class */\nfunction () {\n  function MapsTooltip(maps) {\n    this.maps = maps;\n    this.tooltipId = this.maps.element.id + '_mapsTooltip';\n    this.addEventListener();\n  }\n  /* tslint:disable:no-string-literal */\n  //tslint:disable:max-func-body-length\n\n\n  MapsTooltip.prototype.renderTooltip = function (e) {\n    var _this = this;\n\n    var pageX;\n    var pageY;\n    var target;\n    var touchArg;\n    var tooltipArgs;\n\n    if (e.type.indexOf('touch') !== -1) {\n      this.isTouch = true;\n      touchArg = e;\n      pageX = touchArg.changedTouches[0].pageX;\n      pageY = touchArg.changedTouches[0].pageY;\n      target = touchArg.target;\n    } else {\n      this.isTouch = e.pointerType === 'touch';\n      pageX = e.pageX;\n      pageY = e.pageY;\n      target = e.target;\n    }\n\n    var formatFunction;\n    var value;\n    var option;\n    var currentData = '';\n    var targetId = target.id;\n    var item = {};\n    this.targetID = targetId;\n    var tooltipEle;\n    var location;\n    var toolTipData = {};\n    var templateData = [];\n    var index = targetId.indexOf('_LayerIndex_') > -1 && parseFloat(targetId.split('_LayerIndex_')[1].split('_')[0]);\n    var layer = this.maps.layersCollection[index];\n    var tooltipContent = [];\n    var markerFill;\n    location = getMousePosition(pageX, pageY, this.maps.svgObject);\n    this.tooltipTargetID = targetId;\n    var istooltipRender = targetId.indexOf('_shapeIndex_') > -1 || targetId.indexOf('_MarkerIndex_') > -1 || targetId.indexOf('_BubbleIndex_') > -1;\n\n    if (istooltipRender) {\n      if (targetId.indexOf('_shapeIndex_') > -1) {\n        option = layer.tooltipSettings;\n        option.textStyle.fontFamily = this.maps.themeStyle.fontFamily || option.textStyle.fontFamily;\n        option.textStyle.opacity = this.maps.themeStyle.tooltipTextOpacity || option.textStyle.opacity;\n        var shape = parseInt(targetId.split('_shapeIndex_')[1].split('_')[0], 10);\n\n        if (isNullOrUndefined(layer.layerData) || isNullOrUndefined(layer.layerData[shape])) {\n          return;\n        }\n\n        var value_1 = layer.layerData[shape]['property'];\n        index = checkShapeDataFields(layer.dataSource, value_1, layer.shapeDataPath, layer.shapePropertyPath);\n        templateData = layer.dataSource[index];\n\n        if (option.visible && (!isNullOrUndefined(index) && !isNaN(index) || !isNullOrUndefined(value_1))) {\n          if (layer.tooltipSettings.format) {\n            currentData = this.formatter(layer.tooltipSettings.format, layer.dataSource[index]);\n          } else {\n            var shapePath = checkPropertyPath(layer.shapeDataPath, layer.shapePropertyPath, value_1);\n            currentData = !isNullOrUndefined(layer.dataSource) && !isNullOrUndefined(index) ? this.formatValue(layer.dataSource[index][option.valuePath], this.maps) : value_1[shapePath];\n\n            if (isNullOrUndefined(currentData)) {\n              currentData = value_1[option.valuePath];\n            }\n          }\n        } //location.y = this.template(option, location);\n\n      } else if (targetId.indexOf('_MarkerIndex_') > -1) {\n        var markerIdex = parseInt(targetId.split('_MarkerIndex_')[1].split('_')[0], 10);\n        var dataIndex = parseInt(targetId.split('_MarkerIndex_')[1].split('_')[2], 10);\n        var marker = layer.markerSettings[markerIdex];\n        option = marker.tooltipSettings;\n        templateData = marker.dataSource[dataIndex];\n\n        if (option.visible && !isNaN(markerIdex)) {\n          if (marker.tooltipSettings.format) {\n            currentData = this.formatter(marker.tooltipSettings.format, marker.dataSource[dataIndex]);\n          } else {\n            currentData = this.formatValue(marker.dataSource[dataIndex][marker.tooltipSettings.valuePath], this.maps);\n          }\n        } //location.y = this.template(option, location);\n\n      } else if (targetId.indexOf('_BubbleIndex_') > -1) {\n        var bubbleIndex = parseInt(targetId.split('_BubbleIndex_')[1].split('_')[0], 10);\n        var dataIndex = parseInt(targetId.split('_BubbleIndex_')[1].split('_')[2], 10);\n        var bubble = layer.bubbleSettings[bubbleIndex];\n        option = bubble.tooltipSettings;\n        templateData = bubble.dataSource[dataIndex];\n\n        if (option.visible && !isNaN(dataIndex)) {\n          if (bubble.tooltipSettings.format) {\n            currentData = this.formatter(bubble.tooltipSettings.format, bubble.dataSource[dataIndex]);\n          } else {\n            currentData = this.formatValue(bubble.dataSource[dataIndex][bubble.tooltipSettings.valuePath], this.maps);\n          }\n        } //location.y = this.template(option, location);\n\n      }\n\n      if (document.getElementById(this.tooltipId)) {\n        tooltipEle = document.getElementById(this.tooltipId);\n      } else {\n        tooltipEle = createElement('div', {\n          id: this.maps.element.id + '_mapsTooltip',\n          className: 'EJ2-maps-Tooltip',\n          styles: 'position: absolute;pointer-events:none;'\n        });\n        document.getElementById(this.maps.element.id + '_Secondary_Element').appendChild(tooltipEle);\n      }\n\n      if (option.template !== null && Object.keys(typeof option.template === 'object' ? option.template : {}).length === 1) {\n        option.template = option.template[Object.keys(option.template)[0]];\n      }\n\n      templateData = this.setTooltipContent(option, templateData);\n      var tooltipOption = {\n        location: location,\n        text: tooltipContent,\n        data: templateData,\n        textStyle: option.textStyle,\n        template: option.template\n      };\n      tooltipArgs = {\n        cancel: false,\n        name: tooltipRender,\n        options: tooltipOption,\n        fill: option.fill,\n        maps: this.maps,\n        element: target,\n        eventArgs: e\n      };\n\n      if (this.maps.isBlazor) {\n        var maps = tooltipArgs.maps,\n            eventArgs = tooltipArgs.eventArgs,\n            blazorEventArgs = __rest(tooltipArgs, [\"maps\", \"eventArgs\"]);\n\n        tooltipArgs = blazorEventArgs;\n      }\n\n      this.maps.trigger('tooltipRender', tooltipArgs, function (observedArgs) {\n        if (!tooltipArgs.cancel && option.visible && !isNullOrUndefined(currentData) && targetId.indexOf('_cluster_') === -1 && targetId.indexOf('_dataLabel_') === -1) {\n          _this.maps['isProtectedOnChange'] = true;\n          tooltipArgs.options['textStyle']['color'] = _this.maps.themeStyle.tooltipFontColor || tooltipArgs.options['textStyle']['color'];\n          _this.svgTooltip = new Tooltip({\n            enable: true,\n            header: '',\n            data: tooltipArgs.options['data'],\n            template: tooltipArgs.options['template'],\n            content: [currentData.toString()],\n            shapes: [],\n            location: tooltipArgs.options['location'],\n            palette: [markerFill],\n            areaBounds: _this.maps.mapAreaRect,\n            textStyle: tooltipArgs.options['textStyle'],\n            availableSize: _this.maps.availableSize,\n            fill: tooltipArgs.fill || _this.maps.themeStyle.tooltipFillColor\n          });\n          _this.svgTooltip.opacity = _this.maps.themeStyle.tooltipFillOpacity || _this.svgTooltip.opacity;\n\n          _this.svgTooltip.appendTo(tooltipEle);\n        } else {\n          _this.removeTooltip();\n        }\n      });\n\n      if (this.svgTooltip) {\n        this.maps.trigger('tooltipRenderComplete', {\n          cancel: false,\n          name: 'tooltipRenderComplete',\n          maps: this.maps,\n          options: tooltipOption,\n          element: this.svgTooltip.element\n        });\n      }\n    } else {\n      this.removeTooltip();\n    }\n  };\n  /**\n   * To get content for the current toolitp\n   */\n\n\n  MapsTooltip.prototype.setTooltipContent = function (options, templateData) {\n    var localData = extend({}, templateData, null, true);\n\n    if (this.maps.format && !isNaN(Number(localData[options.valuePath]))) {\n      localData[options.valuePath] = Internalize(this.maps, Number(localData[options.valuePath]));\n    } else {\n      localData = Object.keys(localData).length ? localData : undefined;\n    }\n\n    return localData;\n  };\n\n  MapsTooltip.prototype.formatValue = function (value, maps) {\n    var formatValue;\n    var formatFunction;\n\n    if (maps.format && !isNaN(Number(value))) {\n      formatFunction = maps.intl.getNumberFormat({\n        format: maps.format,\n        useGrouping: maps.useGroupingSeparator\n      });\n      formatValue = formatFunction(Number(value));\n    } else {\n      formatValue = value;\n    }\n\n    return formatValue;\n  };\n  /*private template(tooltip: TooltipSettingsModel, location: MapLocation): number {\n      location.y = (tooltip.template) ? location.y + 10 : location.y;\n      return location.y;\n  }*/\n\n\n  MapsTooltip.prototype.formatter = function (format, data) {\n    if (data === void 0) {\n      data = {};\n    }\n\n    var keys = Object.keys(data);\n\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n      format = format.split('${' + key + '}').join(this.formatValue(data[key], this.maps));\n    }\n\n    return format;\n  };\n\n  MapsTooltip.prototype.mouseUpHandler = function (e) {\n    this.renderTooltip(e);\n\n    if (this.maps.tooltipDisplayMode === 'MouseMove') {\n      clearTimeout(this.clearTimeout);\n      this.clearTimeout = setTimeout(this.removeTooltip.bind(this), 2000);\n    }\n  };\n\n  MapsTooltip.prototype.removeTooltip = function () {\n    if (document.getElementsByClassName('EJ2-maps-Tooltip').length > 0) {\n      remove(document.getElementsByClassName('EJ2-maps-Tooltip')[0]);\n    }\n  };\n  /**\n   * To bind events for tooltip module\n   */\n\n\n  MapsTooltip.prototype.addEventListener = function () {\n    if (this.maps.isDestroyed) {\n      return;\n    }\n\n    if (this.maps.tooltipDisplayMode === 'DoubleClick') {\n      this.maps.on('dblclick', this.renderTooltip, this);\n    } else if (this.maps.tooltipDisplayMode === 'Click') {\n      this.maps.on(Browser.touchEndEvent, this.mouseUpHandler, this);\n    } else {\n      this.maps.on(Browser.touchMoveEvent, this.renderTooltip, this);\n    }\n  };\n\n  MapsTooltip.prototype.removeEventListener = function () {\n    if (this.maps.isDestroyed) {\n      return;\n    }\n\n    if (this.maps.tooltipDisplayMode === 'DoubleClick') {\n      this.maps.off('dblclick', this.removeTooltip);\n    } else if (this.maps.tooltipDisplayMode === 'Click') {\n      this.maps.off(Browser.touchEndEvent, this.mouseUpHandler);\n    } else {\n      this.maps.off(Browser.touchMoveEvent, this.renderTooltip);\n    }\n  };\n  /**\n   * Get module name.\n   */\n\n\n  MapsTooltip.prototype.getModuleName = function () {\n    return 'MapsTooltip';\n  };\n  /**\n   * To destroy the tooltip.\n   * @return {void}\n   * @private\n   */\n\n\n  MapsTooltip.prototype.destroy = function (maps) {\n    this.removeEventListener();\n  };\n\n  return MapsTooltip;\n}();\n\nexport { MapsTooltip };","map":null,"metadata":{},"sourceType":"module"}