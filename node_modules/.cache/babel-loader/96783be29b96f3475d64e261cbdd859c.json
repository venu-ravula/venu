{"ast":null,"code":"import { PdfColorSpace } from './enum';\nimport { Operators } from './../input-output/pdf-operators';\nimport { Dictionary } from './../collections/dictionary';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfArray } from './../primitives/pdf-array';\n/**\n * Implements structures and routines working with `color`.\n * ```typescript\n * // create a new PDF document\n * let document : PdfDocument = new PdfDocument();\n * // add a new page to the document\n * let page1 : PdfPage = document.pages.add();\n * // set the font\n * let font : PdfStandardFont = new PdfStandardFont(PdfFontFamily.Helvetica, 20);\n * //\n * // set color\n * let brushColor : PdfColor = new PdfColor(0, 0, 0);\n * //\n * // create black brush\n * let blackBrush : PdfSolidBrush = new PdfSolidBrush(brushColor);\n * // draw the text\n * page1.graphics.drawString('Hello World', font, blackBrush, new PointF(0, 0));\n * // save the document\n * document.save('output.pdf');\n * // destroy the document\n * document.destroy();\n * ```\n * @default black color\n */\n\nvar PdfColor =\n/** @class */\nfunction () {\n  function PdfColor(color1, color2, color3, color4) {\n    if (typeof color1 === 'undefined') {\n      if (typeof color2 !== 'undefined' && typeof color3 !== 'undefined' && typeof color4 !== 'undefined') {\n        this.assignRGB(color2, color3, color4);\n      } else {\n        this.filled = false;\n      }\n    } else if (color1 instanceof PdfColor) {\n      this.redColor = color1.r;\n      this.greenColor = color1.g;\n      this.blueColor = color1.b;\n      this.grayColor = color1.gray;\n      this.alpha = color1.alpha;\n      this.filled = this.alpha !== 0;\n    } else if (typeof color4 === 'undefined') {\n      this.assignRGB(color1, color2, color3);\n    } else {\n      this.assignRGB(color2, color3, color4, color1);\n    }\n  }\n  /**\n   * `Assign` red, green, blue colors with alpha value..\n   * @private\n   */\n\n\n  PdfColor.prototype.assignRGB = function (r, g, b, a) {\n    if (typeof r === 'undefined' || typeof g === 'undefined' || typeof b === 'undefined') {\n      this.filled = false;\n    } else {\n      this.cyanColor = 0;\n      this.magentaColor = 0;\n      this.yellowColor = 0;\n      this.blackColor = 0;\n      this.grayColor = 0;\n      this.redColor = r;\n      this.greenColor = g;\n      this.blueColor = b;\n\n      if (typeof a === 'undefined') {\n        this.alpha = PdfColor.maxColourChannelValue;\n      } else {\n        this.alpha = a;\n      }\n\n      this.filled = true;\n      this.assignCMYK(r, g, b);\n    }\n  };\n  /**\n   * `Calculate and assign` cyan, megenta, yellow colors from rgb values..\n   * @private\n   */\n\n\n  PdfColor.prototype.assignCMYK = function (r, g, b) {\n    var red = r / PdfColor.maxColourChannelValue;\n    var green = g / PdfColor.maxColourChannelValue;\n    var blue = b / PdfColor.maxColourChannelValue;\n    var black = PdfNumber.min(1 - red, 1 - green, 1 - blue);\n    var cyan = black === 1.0 ? 0 : (1 - red - black) / (1 - black);\n    var magenta = black === 1.0 ? 0 : (1 - green - black) / (1 - black);\n    var yellow = black === 1.0 ? 0 : (1 - blue - black) / (1 - black);\n    this.blackColor = black;\n    this.cyanColor = cyan;\n    this.magentaColor = magenta;\n    this.yellowColor = yellow;\n  };\n\n  Object.defineProperty(PdfColor.prototype, \"r\", {\n    //Properties\n    // public static get Empty():PdfColor\n    // {\n    //     return this.s_emptyColor\n    // }\n\n    /**\n     * Gets or sets `Red` channel value.\n     * @private\n     */\n    get: function () {\n      return this.redColor;\n    },\n    set: function (value) {\n      this.redColor = value;\n      this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"red\", {\n    /**\n     * Gets the `Red` color\n     * @private\n     */\n    get: function () {\n      return this.r / PdfColor.maxColourChannelValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"b\", {\n    /**\n     * Gets or sets `Blue` channel value.\n     * @private\n     */\n    get: function () {\n      return this.blueColor;\n    },\n    set: function (value) {\n      this.blueColor = value;\n      this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"blue\", {\n    /**\n     * Gets the `blue` color.\n     * @private\n     */\n    get: function () {\n      return this.b / PdfColor.maxColourChannelValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"g\", {\n    /**\n     *  Gets or sets `Green` channel value.\n     * @private\n     */\n    get: function () {\n      return this.greenColor;\n    },\n    set: function (value) {\n      this.greenColor = value;\n      this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"green\", {\n    /**\n     * Gets the `Green` color.\n     * @private\n     */\n    get: function () {\n      return this.g / PdfColor.maxColourChannelValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"gray\", {\n    /**\n     * Gets or sets `Gray` channel value.\n     * @private\n     */\n    get: function () {\n      return (this.redColor + this.greenColor + this.blueColor) / (PdfColor.maxColourChannelValue * 3);\n    },\n    set: function (value) {\n      if (value < 0) {\n        this.grayColor = 0;\n      } else if (value > 1) {\n        this.grayColor = 1;\n      } else {\n        this.grayColor = value;\n      }\n\n      this.r = this.grayColor * PdfColor.maxColourChannelValue;\n      this.g = this.grayColor * PdfColor.maxColourChannelValue;\n      this.b = this.grayColor * PdfColor.maxColourChannelValue;\n      this.assignCMYK(this.redColor, this.greenColor, this.blueColor);\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"isEmpty\", {\n    /**\n     * Gets whether the PDFColor `is Empty` or not.\n     * @private\n     */\n    get: function () {\n      return !this.filled;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfColor.prototype, \"a\", {\n    /**\n     * Gets or sets `Alpha` channel value.\n     * @private\n     */\n    get: function () {\n      return this.alpha;\n    },\n    set: function (value) {\n      if (value < 0) {\n        this.alpha = 0;\n      } else {\n        // if (this.alpha !== value) {\n        this.alpha = value; // }\n      }\n\n      this.filled = true;\n    },\n    enumerable: true,\n    configurable: true\n  }); //Public methods\n\n  /**\n   * Converts `PDFColor to PDF string` representation.\n   * @private\n   */\n\n  PdfColor.prototype.toString = function (colorSpace, stroke) {\n    if (this.isEmpty) {\n      return '';\n    }\n\n    return this.rgbToString(stroke);\n  };\n  /**\n   * Sets `RGB` color.\n   * @private\n   */\n\n\n  PdfColor.prototype.rgbToString = function (ifStroking) {\n    var r = this.r;\n    var g = this.g;\n    var b = this.b;\n    var key = (r << 16) + (g << 8) + b;\n\n    if (ifStroking) {\n      key += 1 << 24;\n    }\n\n    var colour = '';\n    var obj = null;\n\n    if (PdfColor.rgbStrings.containsKey(key)) {\n      obj = PdfColor.rgbStrings.getValue(key);\n    }\n\n    if (obj == null) {\n      var red = r / PdfColor.maxColourChannelValue;\n      var green = g / PdfColor.maxColourChannelValue;\n      var blue = b / PdfColor.maxColourChannelValue;\n\n      if (ifStroking) {\n        colour = red.toString() + ' ' + green.toString() + ' ' + blue.toString() + ' RG';\n      } else {\n        colour = red.toString() + ' ' + green.toString() + ' ' + blue.toString() + ' rg';\n      }\n\n      PdfColor.rgbStrings.setValue(key, colour);\n    } else {\n      colour = obj.toString();\n    }\n\n    return colour + Operators.newLine;\n  };\n  /**\n   * Converts `colour to a PDF array`.\n   * @private\n   */\n\n\n  PdfColor.prototype.toArray = function (colorSpace) {\n    var array = new PdfArray();\n\n    switch (colorSpace) {\n      case PdfColorSpace.Rgb:\n        array.add(new PdfNumber(this.red));\n        array.add(new PdfNumber(this.green));\n        array.add(new PdfNumber(this.blue));\n        break;\n\n      default:\n        throw new Error('NotSupportedException : Unsupported colour space.');\n    }\n\n    return array;\n  }; //Fields\n\n  /**\n   * Holds `RGB colors` converted into strings.\n   * @private\n   */\n\n\n  PdfColor.rgbStrings = new Dictionary();\n  /**\n   * Holds Gray scale colors converted into strings for `stroking`.\n   * @private\n   */\n\n  PdfColor.grayStringsSroke = new Dictionary();\n  /**\n   * Holds Gray scale colors converted into strings for `filling`.\n   * @private\n   */\n\n  PdfColor.grayStringsFill = new Dictionary();\n  /**\n   * `Max value` of color channel.\n   * @private\n   */\n\n  PdfColor.maxColourChannelValue = 255.0;\n  return PdfColor;\n}();\n\nexport { PdfColor };","map":null,"metadata":{},"sourceType":"module"}