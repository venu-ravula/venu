{"ast":null,"code":"var _jsxFileName = \"/Users/venu/my-app/src/components/maps.js\";\nimport React, { Component } from \"react\";\nimport { scaleLinear } from \"d3-scale\"; // If you want to use an object instead of requesting a file:\n\nimport geographyObject from \"/path/to/world-50m.json\";\nconst colorScale = scaleLinear().domain([0, 100000000, 1338612970]) // Max is based on China\n.range([\"#FFF176\", \"#FFC107\", \"#E65100\"]);\n\nclass ChoroplethMap extends Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(ComposableMap, {\n      style: {\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(ZoomableGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(Geographies, {\n      geography: \"/path/to/world-50m.json or geography object\",\n      disableOptimization: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \" // if you are using the object, then geography=\", geographyObject, (geographies, projection) => geographies.map((geography, i) => React.createElement(Geography, {\n      key: \"geography-\".concat(i),\n      cacheId: \"geography-\".concat(i),\n      geography: geography,\n      projection: projection,\n      style: {\n        default: {\n          fill: colorScale(geography.properties.pop_est),\n          stroke: \"#FFF\",\n          strokeWidth: 0.5,\n          outline: \"none\"\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default ChoroplethMap;","map":{"version":3,"sources":["/Users/venu/my-app/src/components/maps.js"],"names":["React","Component","scaleLinear","geographyObject","colorScale","domain","range","ChoroplethMap","render","width","geographies","projection","map","geography","i","default","fill","properties","pop_est","stroke","strokeWidth","outline"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,UAA5B,C,CACA;;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AAGA,MAAMC,UAAU,GAAGF,WAAW,GAC3BG,MADgB,CACT,CAAC,CAAD,EAAI,SAAJ,EAAe,UAAf,CADS,EACmB;AADnB,CAEhBC,KAFgB,CAEV,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CAFU,CAAnB;;AAIA,MAAMC,aAAN,SAA4BN,SAA5B,CAAsC;AACpCO,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAe,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAG,6CAAzB;AAAyE,MAAA,mBAAmB,MAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DAA8IN,eAA9I,EACG,CAACO,WAAD,EAAcC,UAAd,KAA6BD,WAAW,CAACE,GAAZ,CAAgB,CAACC,SAAD,EAAYC,CAAZ,KAC5C,oBAAC,SAAD;AACE,MAAA,GAAG,sBAAgBA,CAAhB,CADL;AAEE,MAAA,OAAO,sBAAgBA,CAAhB,CAFT;AAGE,MAAA,SAAS,EAAGD,SAHd;AAIE,MAAA,UAAU,EAAGF,UAJf;AAKE,MAAA,KAAK,EAAE;AACLI,QAAAA,OAAO,EAAE;AACPC,UAAAA,IAAI,EAAEZ,UAAU,CAACS,SAAS,CAACI,UAAV,CAAqBC,OAAtB,CADT;AAEPC,UAAAA,MAAM,EAAE,MAFD;AAGPC,UAAAA,WAAW,EAAE,GAHN;AAIPC,UAAAA,OAAO,EAAE;AAJF;AADJ,OALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD4B,CADhC,CADF,CADF,CADF,CADF;AA0BD;;AA5BmC;;AA+BtC,eAAed,aAAf","sourcesContent":["import React, { Component } from \"react\"\nimport { scaleLinear } from \"d3-scale\"\n// If you want to use an object instead of requesting a file:\nimport geographyObject from \"/path/to/world-50m.json\" ;\n\n \nconst colorScale = scaleLinear()\n  .domain([0, 100000000, 1338612970]) // Max is based on China\n  .range([\"#FFF176\", \"#FFC107\", \"#E65100\"])\n \nclass ChoroplethMap extends Component {\n  render() {\n    return (\n      <div>\n        <ComposableMap style={{ width: \"100%\" }}>\n          <ZoomableGroup>\n            <Geographies geography={ \"/path/to/world-50m.json or geography object\" } disableOptimization> // if you are using the object, then geography={geographyObject}\n              {(geographies, projection) => geographies.map((geography, i) => (\n                <Geography\n                  key={ `geography-${i}` }\n                  cacheId={ `geography-${i}` }\n                  geography={ geography }\n                  projection={ projection }\n                  style={{\n                    default: {\n                      fill: colorScale(geography.properties.pop_est),\n                      stroke: \"#FFF\",\n                      strokeWidth: 0.5,\n                      outline: \"none\",\n                    },\n                  }}\n                />\n              ))}\n            </Geographies>\n          </ZoomableGroup>\n        </ComposableMap>\n      </div>\n    )\n  }\n}\n \nexport default ChoroplethMap"]},"metadata":{},"sourceType":"module"}