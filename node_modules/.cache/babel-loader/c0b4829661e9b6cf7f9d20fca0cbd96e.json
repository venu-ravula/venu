{"ast":null,"code":"import React, { useRef, Children, Fragment } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar range = function range(length) {\n  return Array.from({\n    length: length\n  }, function (_, i) {\n    return i;\n  });\n};\n\nvar splitText = function splitText(text) {\n  if (text === void 0) {\n    text = \"\";\n  }\n\n  return (text + \"\").split(\"\");\n};\n\nvar numberRange =\n/*#__PURE__*/\nrange(10).map(function (p) {\n  return p + \"\";\n});\nvar numAdditional = [\",\", \".\"];\nvar numberItems =\n/*#__PURE__*/\n[].concat(numberRange, numAdditional);\n\nvar isNumber = function isNumber(v) {\n  return !isNaN(parseInt(v, 10));\n};\n\nvar uniq = function uniq(values) {\n  return values.filter(function (value, index) {\n    return values.indexOf(value) === index;\n  });\n};\n\nvar hiddenPieceStyle = {\n  visibility: \"hidden\"\n};\nvar tickStyle = {\n  overflow: \"hidden\",\n  display: \"inline-block\",\n  position: \"relative\"\n};\nvar rotatorStyle = {\n  position: \"absolute\",\n  left: \"0\",\n  top: \"0\",\n  bottom: \"0\",\n  right: \"0\"\n};\nvar pieceStyle = {\n  position: \"absolute\",\n  left: \"0\",\n  zIndex: 10\n};\n\nvar Tick = function Tick(props) {\n  //@ts-ignore\n  return React.createElement(InternalTick, Object.assign({}, props));\n};\n\nvar InternalTick = function InternalTick(_ref) {\n  var children = _ref.children,\n      measureMap = _ref.measureMap,\n      rotateItems = _ref.rotateItems,\n      className = _ref.className,\n      currentClassName = _ref.currentClassName,\n      hiddenClassName = _ref.hiddenClassName,\n      duration = _ref.duration;\n  var index = rotateItems.indexOf(children);\n  var _measureMap$children = measureMap[children],\n      height = _measureMap$children.height,\n      width = _measureMap$children.width;\n  return React.createElement(\"span\", {\n    className: className,\n    style: _extends({}, tickStyle, {\n      width: width + \"px\"\n    })\n  }, React.createElement(\"span\", {\n    className: className,\n    style: hiddenPieceStyle\n  }, children), React.createElement(\"span\", {\n    style: _extends({}, rotatorStyle, {\n      transition: \"transform \" + duration,\n      transform: \"translateY(\" + height * index * -1 + \"px)\"\n    })\n  }, rotateItems.map(function (value, i) {\n    return React.createElement(\"span\", {\n      key: value + i,\n      className: [className, value === children ? currentClassName : hiddenClassName].join(\" \"),\n      style: _extends({}, pieceStyle, {\n        top: i * height\n      })\n    }, value);\n  })));\n};\n\nvar measure = function measure(className, value) {\n  var d = document.createElement(\"span\");\n  d.textContent = value;\n  d.className = className;\n  d.style.opacity = \"0\";\n  d.style.pointerEvents = \"none\";\n  d.style.position = \"absolute\";\n  document.body.appendChild(d);\n  var height = d.offsetHeight;\n  var width = d.offsetWidth;\n  document.body.removeChild(d);\n  return {\n    height: height,\n    width: width\n  };\n};\n\nvar Ticker = function Ticker(_ref2) {\n  var children = _ref2.children,\n      textClassName = _ref2.textClassName,\n      _ref2$currentClassNam = _ref2.currentClassName,\n      currentClassName = _ref2$currentClassNam === void 0 ? \"currentTicker\" : _ref2$currentClassNam,\n      _ref2$hiddenClassName = _ref2.hiddenClassName,\n      hiddenClassName = _ref2$hiddenClassName === void 0 ? \"hiddenTicker\" : _ref2$hiddenClassName,\n      _ref2$duration = _ref2.duration,\n      duration = _ref2$duration === void 0 ? \".5s\" : _ref2$duration;\n  var measureMap = useRef({});\n  var measureStrings = Children.map(children, function (child) {\n    if (typeof child === \"string\" || typeof child === \"number\") {\n      return splitText(\"\" + child);\n    } else {\n      //@ts-ignore\n      return child.props && child.props.rotateItems;\n    }\n  }).flat();\n  var hasNumbers = measureStrings.find(function (v) {\n    return isNumber(v);\n  }) !== undefined;\n  var rotateItems = uniq([].concat(hasNumbers ? numberItems : [], measureStrings));\n\n  if (Object.keys(measureMap.current).length !== rotateItems.length) {\n    rotateItems.forEach(function (item) {\n      measureMap.current[item] = measure(textClassName, item);\n    });\n  }\n\n  return React.createElement(Fragment, null, Children.map(children, function (child) {\n    if (typeof child === \"string\" || typeof child === \"number\") {\n      return splitText(\"\" + child).map(function (text, index) {\n        var items = isNumber(text) ? numberItems : [text];\n        return React.createElement(InternalTick, {\n          key: index,\n          duration: duration,\n          currentClassName: currentClassName,\n          hiddenClassName: hiddenClassName,\n          className: textClassName,\n          rotateItems: items,\n          measureMap: measureMap.current\n        }, text);\n      });\n    } else {\n      //@ts-ignore\n      return React.cloneElement(child, {\n        duration: duration,\n        className: textClassName,\n        measureMap: measureMap.current,\n        currentClassName: currentClassName,\n        hiddenClassName: hiddenClassName\n      });\n    }\n  }));\n};\n\nexport { Tick, Ticker };","map":null,"metadata":{},"sourceType":"module"}