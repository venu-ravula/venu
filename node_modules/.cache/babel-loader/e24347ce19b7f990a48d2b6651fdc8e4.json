{"ast":null,"code":"import { print as printWindow, createElement, isNullOrUndefined, Browser } from '@syncfusion/ej2-base';\nimport { getElement } from '../utils/helper';\nimport { beforePrint } from '../model/constants';\nimport { PdfPageOrientation, PdfDocument, PdfBitmap } from '@syncfusion/ej2-pdf-export';\n/**\n * Annotation Module handles the Annotation for Maps\n */\n\nvar ExportUtils =\n/** @class */\nfunction () {\n  /**\n   * Constructor for Maps\n   * @param control\n   */\n  function ExportUtils(control) {\n    this.control = control;\n  }\n  /**\n   * To print the Maps\n   * @param elements\n   */\n\n\n  ExportUtils.prototype.print = function (elements) {\n    var _this = this;\n\n    this.printWindow = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth + ',tabbar=no');\n    this.printWindow.moveTo(0, 0);\n    this.printWindow.resizeTo(screen.availWidth, screen.availHeight);\n    var argsData = {\n      cancel: false,\n      htmlContent: this.getHTMLContent(elements),\n      name: beforePrint\n    };\n    this.control.trigger('beforePrint', argsData, function (beforePrintArgs) {\n      if (!argsData.cancel) {\n        printWindow(argsData.htmlContent, _this.printWindow);\n      }\n    });\n  };\n  /**\n   * To get the html string of the Maps\n   * @param elements\n   * @private\n   */\n\n\n  ExportUtils.prototype.getHTMLContent = function (elements) {\n    var div = createElement('div');\n\n    if (elements) {\n      if (elements instanceof Array) {\n        elements.forEach(function (value) {\n          div.appendChild(getElement(value).cloneNode(true));\n        });\n      } else if (elements instanceof Element) {\n        div.appendChild(elements.cloneNode(true));\n      } else {\n        div.appendChild(getElement(elements).cloneNode(true));\n      }\n    } else {\n      div.appendChild(this.control.element.cloneNode(true));\n    }\n\n    return div;\n  };\n  /**\n   * To export the file as image/svg format\n   * @param type\n   * @param fileName\n   */\n\n\n  ExportUtils.prototype.export = function (type, fileName, orientation) {\n    var _this = this;\n\n    var element = createElement('canvas', {\n      id: 'ej2-canvas',\n      attrs: {\n        'width': this.control.availableSize.width.toString(),\n        'height': this.control.availableSize.height.toString()\n      }\n    });\n    var isDownload = !(Browser.userAgent.toString().indexOf('HeadlessChrome') > -1);\n    orientation = isNullOrUndefined(orientation) ? PdfPageOrientation.Landscape : orientation;\n    var svgData = '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">' + this.control.svgObject.outerHTML + '</svg>';\n    var url = window.URL.createObjectURL(new Blob(type === 'SVG' ? [svgData] : [new XMLSerializer().serializeToString(this.control.svgObject)], {\n      type: 'image/svg+xml'\n    }));\n\n    if (type === 'SVG') {\n      this.triggerDownload(fileName, type, url, isDownload);\n    } else {\n      var image_1 = new Image();\n      var ctx_1 = element.getContext('2d');\n\n      image_1.onload = function () {\n        ctx_1.drawImage(image_1, 0, 0);\n        window.URL.revokeObjectURL(url);\n\n        if (type === 'PDF') {\n          var document_1 = new PdfDocument();\n          var imageString = element.toDataURL('image/jpeg').replace('image/jpeg', 'image/octet-stream');\n          document_1.pageSettings.orientation = orientation;\n          imageString = imageString.slice(imageString.indexOf(',') + 1);\n          document_1.pages.add().graphics.drawImage(new PdfBitmap(imageString), 0, 0, _this.control.availableSize.width - 60, _this.control.availableSize.height);\n\n          if (isDownload) {\n            document_1.save(fileName + '.pdf');\n            document_1.destroy();\n          }\n        } else {\n          _this.triggerDownload(fileName, type, element.toDataURL('image/png').replace('image/png', 'image/octet-stream'), isDownload);\n        }\n      };\n\n      image_1.src = url;\n    }\n  };\n  /**\n   * To trigger the download element\n   * @param fileName\n   * @param type\n   * @param url\n   */\n\n\n  ExportUtils.prototype.triggerDownload = function (fileName, type, url, isDownload) {\n    createElement('a', {\n      attrs: {\n        'download': fileName + '.' + type.toLocaleLowerCase(),\n        'href': url\n      }\n    }).dispatchEvent(new MouseEvent(isDownload ? 'click' : 'move', {\n      view: window,\n      bubbles: false,\n      cancelable: true\n    }));\n  };\n\n  return ExportUtils;\n}();\n\nexport { ExportUtils };","map":null,"metadata":{},"sourceType":"module"}