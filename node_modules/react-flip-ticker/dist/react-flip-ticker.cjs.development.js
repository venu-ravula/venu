'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var range = function range(length) {
  return Array.from({
    length: length
  }, function (_, i) {
    return i;
  });
};

var splitText = function splitText(text) {
  if (text === void 0) {
    text = "";
  }

  return (text + "").split("");
};

var numberRange =
/*#__PURE__*/
range(10).map(function (p) {
  return p + "";
});
var numAdditional = [",", "."];
var numberItems =
/*#__PURE__*/
[].concat(numberRange, numAdditional);

var isNumber = function isNumber(v) {
  return !isNaN(parseInt(v, 10));
};

var uniq = function uniq(values) {
  return values.filter(function (value, index) {
    return values.indexOf(value) === index;
  });
};

var hiddenPieceStyle = {
  visibility: "hidden"
};
var tickStyle = {
  overflow: "hidden",
  display: "inline-block",
  position: "relative"
};
var rotatorStyle = {
  position: "absolute",
  left: "0",
  top: "0",
  bottom: "0",
  right: "0"
};
var pieceStyle = {
  position: "absolute",
  left: "0",
  zIndex: 10
};
var Tick = function Tick(props) {
  //@ts-ignore
  return React__default.createElement(InternalTick, Object.assign({}, props));
};

var InternalTick = function InternalTick(_ref) {
  var children = _ref.children,
      measureMap = _ref.measureMap,
      rotateItems = _ref.rotateItems,
      className = _ref.className,
      currentClassName = _ref.currentClassName,
      hiddenClassName = _ref.hiddenClassName,
      duration = _ref.duration;
  var index = rotateItems.indexOf(children);
  var _measureMap$children = measureMap[children],
      height = _measureMap$children.height,
      width = _measureMap$children.width;
  return React__default.createElement("span", {
    className: className,
    style: _extends({}, tickStyle, {
      width: width + "px"
    })
  }, React__default.createElement("span", {
    className: className,
    style: hiddenPieceStyle
  }, children), React__default.createElement("span", {
    style: _extends({}, rotatorStyle, {
      transition: "transform " + duration,
      transform: "translateY(" + height * index * -1 + "px)"
    })
  }, rotateItems.map(function (value, i) {
    return React__default.createElement("span", {
      key: value + i,
      className: [className, value === children ? currentClassName : hiddenClassName].join(" "),
      style: _extends({}, pieceStyle, {
        top: i * height
      })
    }, value);
  })));
};

var measure = function measure(className, value) {
  var d = document.createElement("span");
  d.textContent = value;
  d.className = className;
  d.style.opacity = "0";
  d.style.pointerEvents = "none";
  d.style.position = "absolute";
  document.body.appendChild(d);
  var height = d.offsetHeight;
  var width = d.offsetWidth;
  document.body.removeChild(d);
  return {
    height: height,
    width: width
  };
};

var Ticker = function Ticker(_ref2) {
  var children = _ref2.children,
      textClassName = _ref2.textClassName,
      _ref2$currentClassNam = _ref2.currentClassName,
      currentClassName = _ref2$currentClassNam === void 0 ? "currentTicker" : _ref2$currentClassNam,
      _ref2$hiddenClassName = _ref2.hiddenClassName,
      hiddenClassName = _ref2$hiddenClassName === void 0 ? "hiddenTicker" : _ref2$hiddenClassName,
      _ref2$duration = _ref2.duration,
      duration = _ref2$duration === void 0 ? ".5s" : _ref2$duration;
  var measureMap = React.useRef({});
  var measureStrings = React.Children.map(children, function (child) {
    if (typeof child === "string" || typeof child === "number") {
      return splitText("" + child);
    } else {
      //@ts-ignore
      return child.props && child.props.rotateItems;
    }
  }).flat();
  var hasNumbers = measureStrings.find(function (v) {
    return isNumber(v);
  }) !== undefined;
  var rotateItems = uniq([].concat(hasNumbers ? numberItems : [], measureStrings));

  if (Object.keys(measureMap.current).length !== rotateItems.length) {
    rotateItems.forEach(function (item) {
      measureMap.current[item] = measure(textClassName, item);
    });
  }

  return React__default.createElement(React.Fragment, null, React.Children.map(children, function (child) {
    if (typeof child === "string" || typeof child === "number") {
      return splitText("" + child).map(function (text, index) {
        var items = isNumber(text) ? numberItems : [text];
        return React__default.createElement(InternalTick, {
          key: index,
          duration: duration,
          currentClassName: currentClassName,
          hiddenClassName: hiddenClassName,
          className: textClassName,
          rotateItems: items,
          measureMap: measureMap.current
        }, text);
      });
    } else {
      //@ts-ignore
      return React__default.cloneElement(child, {
        duration: duration,
        className: textClassName,
        measureMap: measureMap.current,
        currentClassName: currentClassName,
        hiddenClassName: hiddenClassName
      });
    }
  }));
};

exports.Tick = Tick;
exports.Ticker = Ticker;
//# sourceMappingURL=react-flip-ticker.cjs.development.js.map
